[TEXT]
okay lecture we're back on chat how is that looking i'm good all right awesome great okay sorry about that guys welcome back to the lecture um so if you weren't here for the first lecture my name is rohan suresh and i am one of the co-instructors alongside sami alcati he's not here right now but he's in the chat he's in the chat and he'll be answering any questions you guys have all right so what are the goals for the class today so the goals of the class are firstly to go over class logistics secondly go over what is bash and what exactly will be doing with it third we're going to go into batch setup for different operating systems and finally we'll do an intro to bash okay just double check is can you guys hear me okay and is the screen okay okay all right sorry about that guys yeah guitar wi-fi is kind of bad and i apologize about that all right so first things first general logistics communication oh thank you awesome so communication first things first join the piazza so this uh lecture will be up on the website very very soon join the piazza for almost all your questions regarding the class homeworks lecture content um due dates etc you'll find that in piazza discord for group communication so we do a lot more than just that in discord like i you know span the chat when the twitch is about to go up if you have any questions like i am on discord pretty much 24 7. so is sami we'll answer questions pretty much right away if you have them so discord is a great resource the cs96 website is great for finding the syllabus lectures important links etc and email so we won't be here for you if you have any emergency please email us i you know we're not going to be mad if you reach out to us via email we really want to help you guys out and if you have a personal question you should post on piazza and post a private thing to us lag disappointing okay homework will be assigned a prairie learn and it's going to cover content from the lecture it's pretty basic stuff for the most part we're not going to ask you to do anything too extensive it shouldn't take too long uh we just want you to have like a reiteration of what you saw in the lecture so welcome to part one of bash so our goals gonna take you from a bash beginner to being a bash wizard literally hacking the matrix you're gonna learn all this today 

[TEXT]
so what is bash so bash is a text-only interface which can be used for controlling unix-based operating systems so it's an acronym for born again shell so it's a pun on stevenborn he's the author of the direct ancestor of the current unix shell sh you can read more about that here at this link it is used in many linux machines and was used on mac os up until the new os catalina we'll talk about that in a little bit so why learn bash well firstly it looks pretty cool uh all like the movies you see with the green text like i'm gonna ruin that for you now because you're gonna see that it's all fake and you're going to be actually doing stuff through bash properly bash's standardized wave interacts with operating systems and its programs so the standardization is really really important for easy automation and manipulation of many different tasks so for example if you wanted to have something that helps you log into your ssh automatically you can do that in bash because it's standardized through many many different systems should we download anything i'm going to talk about that no worries and server side tasks so some vms may stick to the terminal so for example if you want to work on a remote server you need to use bash because they don't have a gui interface they only have the terminal and some vm as well might resecure the terminal so setup for linux if you're using linux you have no issues there's no setup if you are on is there lag rip okay bash is better than cmd okay there seems to be decent thing here maybe it'll catch up to you guys if you're lagging try and refresh otherwise i will restart the stream to spam the chat all right so if you're on mac pre-catalina nothing you have no issues bash the default shell but if you're on catalina which i'm sure most of you are you don't really do you can use zsh you don't really have to make that many changes so the default shell in catalina is zsh however for our purposes the difference between bash and zsh are pretty much negligible you really don't need to do a whole lot and you can swap to using bash by simply opening up your terminal over here and typing in bash it'll take you to bash but we're going to use the sh because that's prettier looking and it really doesn't matter for the purposes all right next set up for windows so windows kind of a pain because windows is not a unix system however there are many ways you can get around this 

[TEXT]
so firstly if you're on windows 10 you can pretty easily set up a ubuntu linux shell you can find that over here in this url you may also want to download a virtual machine so you can get something called a local vm you can download a virtualbox which will essentially let you run a linux machine within windows you can also use the ews machine so if you're new you might not know what that is essentially the school has a whole bunch of engineering virtual machines that you can use well i clicked like an accident my bad the school has a let me go back to full screen the school is a bunch of linux machines that you can use for your own schoolwork but just to know you will be connected to the uiuc network so either living on campus or using a vpn and if you're in earlier form windows you shop to office hours and we will help you another cool resource is let me open up a new window it's called rapple.it i'll show it to you later basically it's a i'll post a link up here essentially you can run shell in your windows in your windows browser all right so let's start off with the basics of what control and bash looks like so you have a bunch of commands oh yeah for the kahoot let's do that right now actually if you are in the chat join the kahoot this is the code if you don't know how to join follow the instructions here use your netid as your name i'm going to drop that into the chat here don't worry i will play the music when we're doing this i just wanted to interfere with what i'm saying right now and if there's any mods in the check can just keep spamming the code there we go all right cool uh just keep joining i will give you guys a minute once we actually get into it too so i want all you guys in there so commands we interact with the bash with the bash command line through a variety of commands so these are unique statements or keywords that indicate specific tasks so a lot of it is memorization but eventually very natural so something to note is sometimes you write a single command like ls or list and it'll do exactly what you want but some commands need arguments so arguments are further variables that you put after the command to execute a task so for example the copy command that's cp needs two arguments the original file name and the name of the new file you're making so this will make more sense later uh the code should be higher up you can scroll through the mods we'll be posting in the chat too all right flags another thing that's important in bash and this might seem a little confusing right now but once we get into the actual practices it'll make a lot more sense so a lot of commands have other behavior that initialized with flags and these come at the end of the command and you can find all these flags in the man pages 

[TEXT]
so if this makes no sense to you don't worry you will be a pro this by the end of the lecture so for our purposes imagine this as the system we're using so this is my computer uh this is the folder we're working with and this is what's inside the folder and to make that super clear i have this up here so this is our intro to bash folder and within it are all those directories that you saw on that diagram is this size okay for people or should i make this bigger i'll wait a sec for you guys to reply lag all right okay so if there was lag i'll repeat myself is this size okay for people or should i make this bigger bigger or right fortunately this can't be made that much bigger yeah that's the most you can get out of there all right so first command ls so a lot of these commands are pretty phonetic ls is short for list so ls will list all the files in our current directory so it's usually pretty pretty basic you just type ls and enter and the terminal will print all the files in the current directory so as for your reference this is intro to bash and these are the files in there so now i can just type ls here and all those files that we saw are here pretty basic pretty straightforward we're going to start with the basics and we're going to build up to more complicated stuff also if any questions drop it in the chat next oh yeah the flag so notice how ls is the command this dash a indicates the flag so flags indicated by a hyphen and a short letter or string and then an argument this one has no argument so this will list all the files including hidden files so a is for all pretty basic hidden files are filed to start with a dot and they're not visible in the gui or by just using ls so if you notice if i go back here there's this hidden file but you can't see that over here in the gui interface so if i do ls obviously it's not there when i do lsa all right we got a bunch more files here so what are these files the first one is a hidden file so if i open that for you you'll learn this command we can see that this is a real file has real content in it but we can't see it dot ds store so this is purely for mac os um what it has essentially if i go into this mode in max you can keep your apps anywhere you want and all that data is stored in ds store so essentially how it's formatted and how and other properties within the folder then you have this dot and dot dot so what dot is is the current directory dot just indicates the current directory that you're in and then dot dot is the upper directory so if i were to look over here the upper directory would be desktop does that make sense any other questions about this if not i'm just going to move on 

[TEXT]
our next command is pwd or print working directory so as the title suggests this function will print the path to your current directory so usage like ls it has no arguments you just type pwd and enter and the term will print the path to the current directory so pwd enter and we can see the full path there up until intro to bash okay i'll check obs to see if we have decent ping all right cool okay let's clear that up also the clear command super useful it basically moves things up so like if you're if you have a bunch of text here you just type clear and it'll scroll up so you're back at the top okay lag did you guys can i explain more sure what specifically do we talk about myles m2 okay yeah so if you're in windows uh bash won't work but here let me show you guys this um right now because i think it's really helpful this website replaces languages bash if you're on windows open this up so you can follow along essentially it's just an online virtual machine that you can use to run bash commands everything i showed you can see here you can print your working directory you can clear all that cool stuff different windows try this sounds good is get bash the same as bash um there are so git bash has a different purpose to bash i'd say just try using the ubuntu version because that works really well that's what i use personally in my windows machine it's pronounced replit all right my bad lag oh the meaning of dot dot okay so i'm gonna print so i'm gonna go into this folder here called directory one okay so if i go into that folder and i do ls right or i do lsa sorry see dot dot indicates the upper level folder so it indicates intro to bash so dot dot means the folder that's just above so whatever encapsulates that folder does that make sense okay no requests i want to move on so just a reminder of what our file system looks like can you do just dot dot dot let's find out dot dot dot yup it pulls you up three times on my desktop now so i list i can go into my intro to bash and then back to directory one so yeah you can do dot dot all right so just a reminder this is our file system and we are in the intro to bash folder right now can i demonstrate ls.sure so if i do ls and an argument it will basically list the files in that directory so if i do ls regularly it'll just list these files but if i do ls directory one it'll list the files that are inside directory one so similarly if i do ls.dot it'll list the files in my desktop like so i can probably turn on the camera you guys can see me cool how do i select intro to bash

[TEXT]
oh sure i can show you so when i open up a terminal for the first time if i print the working directory i see i'm in this folder so this doesn't look pretty familiar but we can list the files and we can see there's something familiar here desktop so i use the cd command which i'm going to show you right after desktop and it'll take me to the desktop i can list the files again i see intro to batches there i do cd intro to bash and now i'm back into bash folder is this similar to command prompt yes but the commands are totally different there's a lot you can't do in command prompt that you can do in bash but yes it's very similar no we're not learning command prop command prompt has a totally different set of commands we're only learning bash right now okay so i'm gonna continue on so cd so this will kind of clear things up a little bit cd stands for change directory so cd will allow you to change directories in your bash so right now if i'm in intro to bash i can use cd to move to lower folders or i can go up to upper ones like so so i'll go back insert dash so the usage is you type cd and then your path to your new directory from the current directory how do you do dot dot again you write cd space dot dot dot dot um so then hit enter and you will change directory to the new directory if the directory does not exist the term will print an error message so let's try that for example cd fake folder now this file folder exists so if you can't see it into things that doesn't exist your computer will prevent you from doing that so if i for example if i do cd new directory we'll change the current directory to the new directory so we're at intro to bash right now all right so there's a bunch of questions about command prompt windows and bash let me just explain so the default terminal in linux machines and mac os machines because they're both unix are it's bash it was bash for mac but unfortunately at catalina i got replaced with zsh csh is slightly newer it has a few extra features but for our purposes they're essentially the same the differences won't affect what we're learning right now command prompt is windows own scripting terminal the commands you need for command prompt are totally different to what used in bash but what you can do is get ubuntu linux you get an ubuntu linux shell within uh windows that'll basically work exactly like bash and once these slides go up uh sami you have access to slides if you want to drop the link in please do that so people can use that you can also dual boot that's pretty fun too okay so for cd well then we're going to do now is go from intro to bash our red folder to directory one so we've done this a couple times already but i just want to demonstrate that 

[TEXT]
so notice i'm intro to bash right now if i print the working directory and intro to bash so cd directory 1 and now when i print the working directory we are in directory 1. does this make sense how do you open the terminal okay if you're on a mac you can just hit launch pad type in terminal and open up terminal i personally use item it's an app you can download online it just looks nicer but the functionality is the same also if you have any questions at all please drop in the chat if your question afterwards i'll stay on to answer them okay so the cd makes sense and any of the first three questions first three commands make sense so far command prompt and bash can do the same things yes but that i do think bash has more functionality and there's a lot of things you can download online for bash that makes a lot more powerful whereas command prompt doesn't have that much support are we going to need bash soon absolutely the reason we're teaching ubash is because you're going to use bash to run a lot of things so for example you can run python scripts from bash so i can run python from here do you know you can run python in here right you can do a lot of powerful things in bash we're going to do all of rust and bash a lot of your project will be done in here too so bash isn't a programming language but you can use bash scripting which we'll cover in the next lecture to do some commands it's just a bunch of commands to control your computer the reason we teach you bash is because it lets you do what you can already do in your computer and even more so i'm going to move on in the interest of time so cd continued so if you type cd and start the path with a forward slash you will use what's called an absolute path so this means so what you're using here to move from directory one to the next directory is called a relative path you're moving relative to where directory one is so if i go from here to directory 2 i can write c directory 2 and it's in relative distance but if i do a forward slash i'll use an absolute path so it's not relative to anything it'll basically start from exactly where um my like file system starts and as you said before if you type cd dot dot you will move up a directory so let's actually show you this absolute path so i do pwd if i do cd forward slash users like so and hit enter now when i print the working directory i'm back here i didn't move relative to anything here i went directly to the users folder does that make sense relative absolute paths can get confusing but it's very important to learn this now because you will be using this a lot for scripts you're writing any questions about that uh ricky zao try this googling online shell and find the rebel replit link what's the difference but is that about what's yeah sure i can totally explain that again so if you're let's say you're here right let's go back to um the intro to bash folder

[TEXT]
so from here notice that we have a bunch of files here if i cd to directory 1 like so without the forward slash i'm moving relative to where intro to bash is so for example if i write cd directory one here it won't move me sorry if right cd directory one here it won't move me directory one because there's no directory one within this folder my previous move was relative to where i was but i can use something called absolute path where instead of moving up up up i can just go directly there so i can do cd forward slash users forward slash row onto rush and it'll take me directly to this folder here i didn't have to move relative to anything i just went directly there so does that make sense any questions about the relative and absolute pads makes sense cool we're going to move on so that's what we're going to do now we're going to go cd dot dot move from directory 1 to intro to bash so let's get back there so cd desktop android bash directory one so now you print the working directory use cd dot dot oh cd dot does nothing the dot single dot is your current directory won't move you anywhere cd dot dot will move you up one to intro to bash so notice we run from directory one here to intro to bash up here all right i'm gonna move on so now i'm gonna learn cat cat is let me try my videos for so you guys can focus on this cat is short for concatenate so cat is used to display the contents of a file so your usage is cat file you want to read and the term will print the contents of the file so for example you can just write cat file name and it'll display the contents in the file to read text in this file so for example let's list so let's listen here we see there's two files here there's a text file and a python file let's do cat file1.txt hit enter this is a file with some random data data originally called file.txt we also cat the python file and we can see there's a function here let's actually run the function so to run the function 3 and print the little triangle for us does that make sense does any questions about how cat works anything any questions about cat my feed might be delayed when you cut an image so often you can't cut an image but i term oh so cat is short for concatenate i'll let you read a text file or any kind of file to be honest uh but if you take an image you can't concatenate it because it'll just read actually let's let's do that i think that's a fun experiment we're going to use my professional headshot so if i do cat professional headshot yikes what is this so this is the metadata of the file because why is called concatenate because you're like that's a great question actually why is it called cad i think it's because you're kind of reading it line by line 

[TEXT]
let's just allow this to go on cancel all right i'm gonna stop this because this is getting all my nerves down so why did it print this so obviously if you open the image normally it looks fine it's a regular photo you've seen this photo but when we tried to cat it this happened the reason this happened is because an image is made up of bits and bytes so the way an image is formatted is you have a header which denotes what the file is so it'll tell you it's a you know word document or an image file and the rest of it is a bunch of bits to denote the actual image itself unfortunately if you try to read those bits as text it won't work out and you have these weird symbols like these like weird unicode characters does that make sense any question about that that was a lot of information i just threw at you guys so if you have any questions about that ask me right now oh sorry i didn't say printing the arrays of an image i meant when you oh no so cat will just read the file so cat will just read the file no matter what it is so if i go to um so let's if i go to enter a bash right and i open this folder this file sorry this is all it says this is random text if i tap it it'll just read the file but if i tap image an image is made of a bunch of bits all files are made up of bits but those bits don't translate into text characters those are just a bunch of bits that denote colors and such when you try to print it out as text you get those weird characters that we saw earlier does that make sense any questions about that oh i use item so this is called item i personally like it is because it lets me do a bunch of things like i can see what my git status is it just looks cool yeah and move on from cat now oh now we'll learn touch so touch will create a file in the current directory and the type of file depends on the extension so you can make any kind of file can we use vs code absolutely i use vs code it doesn't matter what you use though touch will create a file in the current directory the type of file depends on the extension so you can just write touch file name dot file extension and you will create a file in the current directory with that name and extension so touch textfile.txt will make a text file touch python file.por like a python file touch html file.html file will make an html file 

[TEXT]
so we're gonna go into directory one and we're gonna create a new file here so just for your reference in directory one right now we have just the directory in this file so let's go to directory one now we're going to touch what we call the file new file.txt new underscore file.txt enter oh my bad i used a question mark there now when i ls we can see new file.txt there and it's also you probably saw it getting animated made there how to remove file we're going to get right to that you guys are one step ahead of me so that's how you touch a file we also touch different kinds of files we can even touch a file with no extension what kind of file is it it has no extension it doesn't matter you can touch a python file you create python files you know like python dot py you can touch excel files it really doesn't matter bash and terminal are essentially like interchangeable like terminal here is zsh or bash like that's the default like it will do everything you want to ls cd print working directory it'll do all those things okay so moving on remove rm remove so rm will delete a file permanently so i need to make that very very very clear rm will delete a file permanently it will not put in the trash that file is gone you will not be able to get it back so the way you use it is rm file name and the file will be permanently deleted so chat message just write rm permanently deletes files and just spam it in the chat so everybody sees it rm permanently deletes files be very careful with it so we have a bunch of these files here let's delete them rm actually let's go back here for a sec so we'll do this first rm so watch over here r on asdf rm python whatever that was deleted rm new file.txt deleted all that stuff is gone and also it's not gonna be my trash it's permanently deleted i'm not going to rm my oh that's cool though watch this if i go to this directory here so watch if i do rm directory it won't delete a directory unless you use rmrf so rmrf is the recursive command so what it does is it will delete the file or the directory and all its underlying components this is super super dangerous if you do rmrf at like a user's page you will lose all your files all your users everything is gone so for example if i make a directory here new folder with another folder in there right so by ls now you see the untitled folder there if i try to rn the untitled folder it'll say you can't use the directory but if i do i want you guys to see this getting deleted if i do rmrf on title folder everything is gone 

[TEXT]
everything inside the folder is gone if you are on system32 big rip is what i'm trying to say rm is very dangerous you can please try to avoid this as much as possible you can even aliase it to something else like move it to trash instead be very careful with this command so as you saw we took that file and we deleted it okay before we go on one last command make make a make directory so mkdir is short for make directory mkdr will make an empty directory so it's pretty basic you it's like touch user mkdir and directory name no extension and you'll create a new directory so we're going to go into directory 2 and we're going to make a new directory so so notice that we're here in directory 2. mkdir what is this called new directory and this new folder here that we've just made all right so that being said are there any questions at this point about any of the commands about file navigation about that weird thing we did the image anything at all right now drop them into the chat yo sorry directory equals folder yeah okay sudo we are going to cover that in the next lecture sudo essentially gives you what's called root access basically think of it as god mode you can do whatever you want the system itself will try and protect you and your files by preventing you from deleting stupid things like you don't delete core files but if you do sudo rm some core file the computer will usually let you do that and that is really bad so be very very careful and only use it when you totally know what you're doing can we rm a directory okay so i was going to get to this if you rm a directory it won't let you there's a different command for that but if you use rmrf like we covered here rmrf will delete the directory and everything inside it if you're on the terminal how can you save it could you expand on that question how do i move things to trash i will teach you how to move things to trash very soon yeah you can use it as a move command let you move it to trash if you make the directory whereas the new directory good question uh it'll be in the in the current directory you're in so if i'm in directory 2 by ls it'll make the directory in here 

[TEXT]
so some name it'll make it here in the current directory okay why am i teaching dangerous things these things aren't dangerous these things are very very useful for your computer if misused anything can be dangerous like i could write you know i could do i could make a perpetual while loop in python that'll eat up all your ram but i'm not going to not teach you python because it could be dangerous right these are all tools that you can use depending on how you use them is up to you okay any final questions you guys have a couple seconds before i all right okay if you have a it's how to make darts anywhere i believe you can just do make dir um so let's say i'm in directory one you can just do like mkdir and you can write directory too like you can basically put the path there so i'm in directory one right now as you can see but if i do mkdir like this it'll make it it'll follow the path and put it there so that the argument the optional argument there is the path that let you make the folder there how do you move a directory i will cover move very shortly i just want to answer questions about the previous things first if you opened vim all right if you open vm and you can't get out just press escape colon q exclamation mark don't get stuck in mem so if you want to utilize bass so right now i'm actually using zsh but if you want to use bash you can just write the word bash and you will enter bash this is the exact same as before all your everything that you want is there all the same commands i like zsh because it looks cleaner and the chain difference between don't affect me my day to day don't delete terminal oh yeah sure i can totally plan to make python file you just do touch some name and just put dot p y is the extension make sense all right with that being said we're going to go to the coot i don't want you guys to not get attendance so kahoot here's the code i'm

[SUMM]
The instructors for this class are Rohan Suresh and Sami Alqadi. The goals for today are to go over class logistics, go over what is Bash and what we will do with it, and understand Bash setup for different operating systems. Communication is through Piazza and Discord. Bash is a text only interface which can be used for controlling unix based operating system. Bash is a standardized way of interacting with the operating systems and its programs and standardization allows for easy automation/manipulation of many different tasks. There is virtually no setup for Linux or Mac, but for Windows one must install an Ubuntu Shell. Commands are unique statements that indicate specific tasks. Some commands need arguments which are further variables we provide to commands to execute a task. Flags are used to initialize commands behaviors. ls is used to list all files in the current directory, and the flag -a is used to list ALL files, including hidden ones. pwd is used to print the working directory. cd will let you change directory. Using cd and then starting the path with / will use an absolute path and cd .. will let you move up a directory. cat is used to display the contents of a file. touch is used to create a file in the current directory. rm is used to PERMANENTLY delete a file, and using the flag -rf with delete a file and its underlying components. BE CAREFUL WITH THIS. mkdir is used to create an empty directory. rmdir is used to delete an empty directory. mv is used to rename a file and/or move the file to a new location. cp will copy a file to a new location. man is used to bring up the manual for a command. Piping into files allows you to redirect output from the command line: > is used to redirect output, >> is used to append output to the file.
[SEP]

[TEXT]
hey everyone and welcome back to cs196 and welcome to part two of bash so let's quickly go over our objectives for today so firstly i want to teach a few more commands in bash the ones listed down here and i want to go over logical operators too i then want to go over text editors in bash the ones listed here i want to go through aliasing and finally as an extra bonus i want to go through an intro to bash scripting so let's get right into it our first command for today is a super useful one it's called sudo and sudo stands for super user do what 0 does is it gives the user root privileges so that's similar to admin rights so the usage is if you type sudo and then some command you'll be prompted to type the root password which will be the password of the admin whoever the super user is and the command we run as a super user so for those of you are unsure who who the root user is think of the root as administrator for your computer or your network or whatever you're working on they essentially have the power to do whatever they want on the machine so that being said with great power comes great responsibility with sudo you can do anything potentially even mess with your computer delete important files delete things that might print your computer money as well as it should so be incredibly careful using sudo and only use it when you know exactly what you're using it for so for example let's say i wanted to create a file using the touch command as super user so what i would do is i'd write sudo and then the command so touch let's call the file file sudo after i run the command i'll be prompted with a password like so and notice the timeline password that nothing is actually showing up in that password bar so let me put my password in and now this command is run as a super user now this isn't a really exciting option because you know you can create a file even if you're not the super user but for more powerful names and things that require a super user you can use sudo to get that extra access like for accessing restricted files or something like that notice now though if i want to delete the file as super user file sudo i won't be prompted for the password again because they know we're in the same session and we're probably still the same user so remember be very very careful using sudo because you can do anything with it and you really don't want to risk messing with your computer and here's a fun tweet that i found it's what i imagined practice like so parent can you please clean your room kid no parent pseudo-clean your room yep 

[TEXT]
fine i know it's not that funny but i thought it was pretty funny so um next we have echo so the echo command essentially allows you to print into bash so this seems kind of useless initially but it's very useful when you're training longer commands to debug while and wrong so your usage for the echo command is oh sorry about that is you write echo sum string and then the sum string that you put after echo will be printed into the terminal window and will be ended with a new line so what's important about that is that it just means that your new your next prompt will be on a new line of the same line as the string you printed and i'll show you that in our example so if we wrote echo hello bash world this will just print this message into the terminal window so let's try and recreate that in our terminal window here so let's echo open speech mark hello bash world closing speech mark enter and just print that there and what i meant by saying it puts a new line character at the end is what what happens here notice how this intro to bash thing doesn't just start on this new line on the same line here there's a new line character here that pushes us down to this line down here for the prompt so this isn't might not seem very useful but it's useful when you're training longer commands so you can debug going wrong with longer bash commands or when you're writing batch scripts think of it as a regular print statement let me hide my camera there so now we're on to find find is a really powerful tool for locating files and once you find a file you can then run commands on those files that you just found so the usage is you right put find and then your path the directory and then hit enter and the path to all the files in that directory will be printed to terminal and this includes files inside directories inside the directory specified so let's try find dot and see what happens so notice here where the intro to bash folder but within to enter the bash folder is a bunch of other directories other folders in them and other files in them so let's do find dot so the dot indicates the current directory and notice all the files that are in here are now being printed and all the files that are within those like directories are also being printed like so so this is a really useful way to find out exactly what's in your directory so let's say i wanted to find out what was in just directory 2. i could do find directory1 directory2 give that path and now we see what's in here so this alone might not seem super useful we can build on this like so so if you use the flag name followed by a file you can find the pads to specific files so let's say you have a really big project and you want to find a specific file this is a really useful way to do that so usage is if you type find the path and then use the name flag followed by the file name 

[TEXT]
when you hit enter the term will print the path to the files with that name so let's first demonstrate that before we go into wild cards so let's say we're looking for this filender.txt what i can do is i can do well say i know this file is here somewhere with an intro to bash what i can do is i can do find dot because that's the path we know it's somewhere within this directory and then do name file enter dot txt so trying to find this file here or the path that file there hit enter we get the full path all the way to where we want to be relative to where we were initially which is the intro to bash folder so this is really good when you're trying to find a specific file or a path display file from a higher level folder or from a very large a folder with a bunch of files in it but what makes it really useful is if you use wild cards so the astros wildcard can let you select a group of files so for example if i do asterisk.txt what that's saying is we don't care what comes the asterisk along as long as the file ends in txt so this will select all the text files and so if also let's say we have something that says 196 star dot txt this will find all text files that start with the string 196. so essentially all files start with string 196 have something in the middle we don't care what's in the wild card and ends in dots txt so firstly let's try and find all the text files that are within intro to bash so we first do find dot to indicate the current directory and now at least i always actually have to put speech marks when using wild cards or trying to find a file a name sorry so you name speech marks asterisk to indicate that we don't care what the file is called just as long as it ends in dot txt so use a pattern matching and we enter we see all the text files that within the directory not just within this level here but in all the lower levels too have been listed out here and that's really useful when you're trying to find a specific file or speak type of file within a huge uh directory so now let's create a bunch of files to start with 196. so touch 196 a dot txt touch 196 a b dot txt oh i spelt it wrong okay so a bunch of files down here that all start with 196. and i want to find only the files to start with 196 we use find dot indicate the current directory name and we put 196 wildcard.txt and what this is telling uh bash is that or the find command sorry is that we want whatever we're looking for to start with 196 we don't care what's in the middle because there's a wild card here and we want to end in dot txt so now when i hit enter we see that all the files 

[TEXT]
oh sorry about that let me make this a little smaller and now we see that all the files that we just created the starter 196 and ended.txt are being listed here and i'm sure i'll tell you why this is really useful in trying to find files within larger directories because using pattern matching to specifically get what you're looking for another point on that is use the i name flag it'll make your search case insensitive so using the name flag is case sensitive ina will make it case insensitive um just demo that quickly we make two files let's call one cs.txt and let's call one cs2.txt if i just try find cs star so to say start to see us doesn't matter what it ends in we only get this file here but if i do i name and i hit enter both those files are listed because we're saying that we don't care if this is insensitive case sensitive or case insensitive and just to go over this pattern matching again we're just saying we want file to start with the cs or in this case c and capital s and whatever comes after that doesn't matter we have a wild card now we have the delete flag so if you use the flag delete all the files that are returned by the find command will be deleted so for example if you type find path the directory and then use the delete flag when you hit enter all the files in that specified directory will be deleted so all the files that are returned by find will be deleted second secondly if you type find path directory and then use the name flag and specify specific name of a file or specific pattern match and then hit delete when you hit enter all the files of that name and specified directory will be deleted so this is a great way for us to get rid of all these files we created with the 196 start so just as a recap let's try and find them first so 196 star dot txt and now we see all those files being listed here if we add delete now when i try find nothing's coming out because we deleted all those files next we have grep crap is a really powerful tool it stands for global regular expression print so graph is used to search for text and return matching lines in a given file so its usage is if you type grep the text you're searching for and then a file to search for and hit enter the terminal will print the lines where the search text was found and file to search so for example we have this file here called names.txt which i'll show you in a minute if we grab rohan it'll print all the lines and name the txt where rohan was found so let's first cat this file names.txt and this is what it says here

[TEXT]
if i do grep rohan names.txt and hit enter all the lines where rohan appears will be printed out here notice that it's case sensitive rohan here and ron and sammy down here which starts with the lowercase r have not shown up so now we have the w flag with grab using the w flag will turn only exact matches not just a partial match so example if a file has the words rohan and ron and sammy on two separate lines grep will return both the lines but if we use w flag then only rohan the first example will be returned so the way we use this is the usage is grep search text file to search similarly as we did before and then it's w flag so firstly notice here when we did grep normally disappears here this appears but then not rohan also appears because this is a part of that like word similarly this also appears if i use the w flag these two options get removed but this isn't an exact match of the search text that we're looking for notice also that rowan and sammy this full sentence is returned and that's because there's an exact match of the word we're looking for within this entire sentence next we have the i flag so using the i flag will make the search case insensitive so for example if if a file is the words rohan and lowercase rohan on two separate lines graph will return only the first line because it's case sensitive but if you use i flag it will return both the lines so the way we do this is we just put an eye flag at the end of our grab or at the start if you want you can also put the flag over here hit enter and notice all instances where roland is put not just where it's a capital r had been returned another cool thing with graph is that you can stack flags on top of each other so for example if you grab wi and then you put whatever you're searching for and look for a case insensitive search and also an exact search so what does that look like well first let's look at what a regular graph function grab for rohan and names.txt looks like right and let's just cat names.txt as well so you know what's in here if we want only a case insensitive but with an exact match we'll only get these three lines because these are the only lines which are case intensive and match rohan and also where there's an exact match no concatenated words like this or like this or like this crap is very useful in searching large text files and large documents to find exactly what you're looking for now we have diff diff is short for difference and diff will compare two files line by line and identify the lines where they differ so for example if you type diff file one file two and then press enter you will see the difference between file one and file two printed in the terminal 

[TEXT]
so for example i do diff a.txt and b.txd as the two arguments it'll print the differences between the two files in uh in the terminal window files are identical then nothing will be printed so let's try and demo this let's create a file let's call it a.txt another file called b.txt if i cat these files and i cat this one notice that there's nothing in them they're pretty much identical not pretty much they are exactly identical there's nothing in them if i try and diff them nothing is printed because they have no differences but let's say i put something a.txt so we're using a ventex editor which we'll cover shortly this is a if i diff this now notice it tells me where the difference occurred and it'll tell me what the difference was if i put something into b and diff it we see that the differences are both being listed here so this is useful when you're trying to for example look at two outputs and see whether the same or they're different try to analyze them because this is a great job of finding exactly where the differences are and printing them into terminal window for you to use okay now moving on to logical operators so this is ampersand ampersand or the and logical operator so what it does it lets you do several commands sequentially all in one line as long as all the preceding commands complete successfully so what does that mean so let's look at the usage first if you type command one and then command two and then command three and then and command four and hit enter then all the four commands enter will be done one after the other so we won this one first then this one then this one then this one but let's say this one runs this one runs but then command 3 fails command 4 will not be run all proceeding commands have to be completed successfully for the command to be run so for example over here if i do make directory 3 and cd directory 3 touch new file and then cd dot dot what this does is it'll create a new directory move into it create a new file within that directory and then cd out of there so let's actually just demo that so we're entered a bash right now we're over here if i do mk dir um 303 and cd der not die dirt3 and touch testing dot txt and cd dot dot notice it looks like nothing happened you did see a little motion here i'm sure but if i print the working directory in the same spot as i was before but if i list notice that there's a new directory 3 and if i list the contents of directory 3 testing.txt exists there but now watch let's try let's say i try to cd into some random file just the file doesn't this folder doesn't exist and then i try to echo this message so we know this directory doesn't exist as you can see here we also use find if we wanted to to double check that when i hit enter notice that this message wasn't printed well 

[TEXT]
that's because as shown this error message this didn't complete successfully this first command didn't complete successfully so we didn't go on to the next one over here and now we have the or logical operator so it looks like these two vertical bars so first the way this works is it'll try the first command the one preceding the auralogical operator and if the first command fails it'll do the command after the logical operator so in the usage here you see if you type command 1 or command 2 and then press enter bash will first try to run command 1. a command will complete successfully then this whole thing ends after command 1 runs but if for any reason command 1 fails it'll run command 2 instead so this is a good way to uh to double check if something that you ran work successfully you could say like run a python script here and there's any error like just run this instead so for example if you try to cd to this not a real directory this is a fake directory or echo that doesn't exist if this first directory doesn't exist it will lead to the second command running and let us know that nothing was that this one failed so let's actually try that here so let's see the uh fake dir and we know looking over here that doesn't exist or echo that directory doesn't exist oh it's missed uh let's put the closing part there that's weird anyways so what happened here was it said nope this directory didn't exist and then it echoed that this message here another cool thing you can do is you can chain logical operators so you can chain long operations in one line using different logical operators and that's really useful if you want to try to do multiple things at once with like these checks like with the or statements for example so what would this command do take a look at this line here and you can pause the video here and try and guess what this would do i'm going to copy this so we can run this in our terminal window okay now that you guys had a second look at it let's run this and then walk through what happened okay so firstly i tried to cd into this fake directory well we know zero feet directory so it told us that because it told us that here there's an error there's an add operator and it was going to echo and move to fake directory but because the proceeding statement failed this was not run and because this whole statement failed this was run instead and it said there was no directory there pretty straightforward this is useful for running long commands and having a little check to see if anything proceeding it failed so now we're going to move away from commands and try to move to text editors in bash so firstly how do we edit a regular file well if you want to add a normal file we just use a text editor like vs code or notepad but how do we edit files within bash well again we use the text editor so these will be different from ones you may be familiar with because you can't actually click on anything within bash text editors 

[TEXT]
so despite this initial learning curve they can actually be very powerful and efficient and sometimes you were forced to use them for example let's say you're working on a vm right out of your terminal like you have to ssh into a vm or for server-side scripting you try to ssh to your server you might be forced to use a text editor within bash so the most popular text editors in bash are vim and emacs we'll also go over nano which the not as popular as these two but it's definitely the easiest one to start learning and the one i've started learning with first so let's start off with them them is a popular term letter that was released in 1991 so you start by typing vim followed by a file name if the file exists then vim will open the file but if it doesn't exist then if you save after closing them it'll create that file so let's follow along with this let's do them them file.txt so when you open up them initially it opens up in command mode and this can be identified by lack of description at the bottom of the window like so just as the file name so in command mode you can use these keys to quickly navigate and do a few powerful things so firstly before we do this let me put some data into our text file this is a them file text file with some random words and other bits of info okay i'm happy with that now let's look at some of the command mode uh shortcuts so firstly we can use hjkl to go left down up right so j and k i used to move down and up respectively l used to move right and has to be used to move left you might think that's a pretty weird set of like keys to use but if you look down and keep your hand there you notice it's actually right in the hot bar and by doing this you can navigate quickly through your text file without having to move your hand around to the arrow keys or your mouse next we have the dollar sign and then the underscore a dollar sign will move your cursor to the end of the line and underscore will move your cursor to the beginning of the line so if you do dollar you'll go over there underscore will take you there w and b are pretty cool they move your cursor forward and backward one word at a time and we can use this forward slash some word to move the cursor to the next occurrence of that word so first let's do wb w takes us forward like any video game you play on your keyboard and b takes you backward one word if you reach the end of the file it'll take it'll stop you there and if you do forward slash and you write some word 

[TEXT]
for example let's write bits it'll take you the next occurrence of that word like so notice how it came appeared down here you can also move around the file if you use line number followed by gg it'll move the cursor to the start of the line beginning of with the line number you specified so if i did one gg it'll take me to the first file if i did four gigi take me to that fourth line there again a quick way to navigate through your file now you have dd d deletes the line that the cursor is on and u is undo so let's demonstrate that together let's go up here to dd we deleted that line entirely and u brings it back so command mode is really a great way to quickly navigate through your file and have a quick interaction with the file itself but how do we actually put stuff into our file well if you press i you can enter insert mode and insert mode the key uh you can use the keys normally so you insert data that you want to the file and if you press the escape key you'll go back to command mode so if i press i i can now enter data entering data into file and i can use the arrow keys to move around the file notice if i try to use like the hotkeys like hjkl it won't navigate the file i'll just type into there and if i type escape i go back into command mode and i can do all the things that i that we went through in the last page finally very importantly how do we exit them and this is actually kind of a cs meme because people get stuck in them and there's no clear way of leaving it to exit them uh you need to firstly return back to command mode and either press colonqueue to quit and this only this only works that many changes the file like if you just use vim to read the file colon q exclamation mark to quit without saving and colon wq to write and quit so let's firstly try and just colon queue out of this we'll say no because you've made changes here but if i do colon wq i'll be saving quitting and now we have a new vim file here and just uh make it clear vim a vim file isn't like different from regular files this is just a regular old text file i just called it vim file so we know what we're working with so i do vim vim file here and i delete everything if i exit and i use queue exclamation mark when i cap this file notice that none of those changes were saved emacs is another popular term letter that was released in 1985. so to start emacs you type emacs followed by the file name very similar to them also similarly given if the file exists that emacs will open the file but if the file doesn't exist then if you save after closing emacs it will create that file the x is similar to them however does not use modes like them instead commands are prefixed by the control keys or the meta alt option key 

[TEXT]
so all for windows and option for mac when you open emacs there are no modes so you can start typing straight away so let's demonstrate that emacs emacs.txt so notice it's straightway we can start typing this is an emacs created file blah blah cs196 it's cool and i'm also just going to scroll down here to show you how windows work and then move up so if you hold ctrl and then type a or e you'll go to the beginning or end of the file respectively if you type control v you'll move down one page so a page is the amount of text visible on the window so notice here we can only see this much even though we know this text below control under scroll undo changes and control h will bring up a help page so if we do control e sorry a it'll take the start of the sentence and e will take us the end like that control v will take us down one window uh let's maybe actually delete this line here control underscore will bring back that line it's just undues finally something cool if you do control h you get this cool um tutorial on how to use emacs next if you hold the meta key or the option or alt key depending on what device you're using and then use f or b you'll move further back with respect to your one word and use a or you'll move to the start end of sentence respectively so for this i'm actually going to move to terminal because an item if you press the options key on a mac at least it has a few peculiarities but on very little terminal that doesn't exist so emacs random dot i can't spell random.txt um this is a random text file blah blah so if i do control b sorry meta b i move back one word at a time so that's option b on a mac and all b out of windows and if i do option f i can move forward like so again a or e will take me back to the start end of a sentence let me put a full stop here to demonstrate that take me back to here back there let me put a full stop here too okay like that so if you press escape followed by um a greater than sign yeah great and signing with the end of the file if you escape followed by less than sign you'll move to the start of the file so let's do escape greater than go to the end of the file escape less than oop escape less than take to the start of the file like so to save a file on e9x you'll control then press x then s and to exit you hold ctrl then press x then c so let's demonstrate that if i do control x then s that saves it so you can see that there because this file is out of my desktop i do control x and c we leave emacs you close that and again if i list you can see now that there's an emax file if i can it all the information we put in there is now there also fun a little bit of information about emacs and you can play a bunch of games inside it 

[TEXT]
i'm not going to understand the lecture but you can look it up you play tetris this is gamoku a bunch of fun stuff finally we have nano so nano is not as popular as them or emacs but it was very it's very very easy to use so nano was released in 2000 and has the smallest learning curve out of all the editors we've looked at today so to start you just type nano followed by the file name and again if it exists that will open the file and if it doesn't exist then it'll create it if you save after closing nano so now you can go ahead and start typing as soon as you open up nano and the commands that you need are at the bottom of the editor so i can just do nano nano file dot txt dot txt and i can just start typing this is a nano file random text everything i need is down here at the bottom so to exit i can just do control x y to say yes and i hit enter and i can leave and see if i can't that file we made it has everything we just wrote in there it's definitely the easiest one to use and it's the first one i picked up i personally use vim but you should try all three and see which one you're comfortable with now we're going to talk about aliasing so aliasing is a powerful tool to create best shortcuts so we do this by using the alias keyword so for example you for the usage sorry as you do alias followed by the shortcut name equals and then sum command so this will create alias so if we type shortcut name this full command here which is usually longer will be run and to remove alias we simply use the unalias keyword like that so let's say for example every time we do ls we don't want it to just ls the files we want to ls all the files so we can see the hidden ones as well that's pretty easy we can just do alias ls equals ls a so using the all flag so now when i write ls notice that all the files are being listed not just the regular ones but even the hidden ones too but let's say we've got board of this i'm going to go back we'll just do unalias ls pretty cool another cool thing you can do is let's say when you open up bash we know that we don't start off right in the desktop we start off in a higher up folder so let's say we want to go there directly every time we open up our terminal so let's alias so let's first see what the command is cd desktop enter the batch let's see we want to get here every time quickly every time we open up bash we can copy that and we do alias let's say 190 cs196 as our alias put the command in there hit enter 

[TEXT]
now i hit cs196 it'll take me a right to intro to bash pretty cool i can aliase it write cs196 and now when i write cs196 it'll tell me this command doesn't exist because we removed that alias so now we've covered all the content that i think is relevant and useful for most of the work you'll be doing with bash and in your project especially but as extra bit of information we're going to cover an introduction to bash scripting so within bash you also write scripts to run commands and these can even take an input so bash scripts have the dot sh extension and you can run the scripts by typing bash followed by the script name dot sh so let's first talk about variables within batch scripts so you can declare a variable by choosing a variable name and then assigning a value to it you do not need to declare the type of a variable as you have to do in java for example it's like python where you don't need to clear a type to use the variable later you put a dollar sign in front of it to indicate that it is a variable and note don't put spaces around your variables so i have a bunch of scripts over here that we can use so let's open these up in vs code because that's easy to read let's first look at this bit of code here so we have this secret variable and it has some password there and we're going to echo it and to echo it so echo as we know is a batch command we use echo followed by the variable name we use the dollar sign to indicate that it's a variable so we have that over here it's called var.s.h let's run this so as expected it first prints the password on this line next it prints the secret message says whatever the password is and then says it again these are two ways of identifying a variable within the echo now let's talk about conditionals in bash scripting so you can also use conditionals in batch scripting just like you could in a regular programming language for those of you don't know what a conditional is essentially it's if else or if elif else statements llf is just short for elsif essentially what this lets you do is make decisions on what should be run in the code based on the condition of certain variables so note let me get the red pointer for this you need spaces between the condition and the bracket here so your condition your fl statements are in this form and the end and if backwards there so you can use dash eq as an equals operator for numerical comparison so you could say like five dash you know eq five and that will return true or five e cubed six would return false you can use dash n e as a not equals operator for numerical comparisons you can use e e not ee sorry equals equals as an equals operator for string comparisons and you can use estimation mark equals or not equals uh as not equals operator for string comparisons 

[TEXT]
so take a look at this code snippet here you pause and take a look at it we're also going to look at it over here fold bigger so firstly we're declaring this variable num saying it's 20. stir is hello first we'll echo this so we'll say hello we go to the first loop here if num does not equal 20 then we print what it is otherwise if string equals hello then we echo hi there else we print while i'm confused so what do you think this should do there was an answer down there but what do you think this should do well it should say hello and then hi there because string does equal hello let's write it like this i believe yeah don't need the speech marks around it and um say hi there because hello does match hello and i'll respond with that so now i'm gonna cover that up take a look at this code snippet here let me comment this out what do you think this code snippet should do pause there read through it okay i'm gonna run it now said hello well i'm confused why did it say that well the first condition is false because 20 obviously does equal 20. secondly this condition here is false because hello does not equal word so we have the else statement which is well i'm confused like so now let's talk about loops loops are really powerful tool to let you do the same lines of code repeatedly lets you do a lot of things within with a few lines of code so the form of a loop is like this so you do four some counter in some range here this is the range so it's your starting number to your ending number and then you do whatever is here do something take a look at that now let's look at an actual example so for i in range 1 to 10 do echo we are on loop i so what do we do here well we're taking this variable here or echoing it in the string so take a guess what it does i'm sure it's pretty obvious it just prints that we are on loop blank from one to ten now we have functions so for those who don't know what function is essentially it allows you to take a chunk of code and give it and be able to call that chunk of code with a unique name so function declaration is in this form we give a function name two brackets and then we put all the stuff that the function is meant to do within those two brackets here if you pass a value into the function the function will save this into dollar sign one i'll talk about that in just a second and the way you call a function is you put the function name and then the values that you're passing into it 

[TEXT]
so let's look at this function here so we have this greet person function here so what it's doing is it's echoing so printing hi there some variable you look second variable so let me talk about these variables you're probably wondering why are we starting at one or not zero i thought this was a programming language well the first variable is actually greek person this is dollar sign zero that would be the function call itself the next variable would be dollar second one dollar sign two dollar time three etc etc etc and you can use those variables within your function here so if i comment this line out and i try and run this nothing happens that's because a function doesn't run on its own you have to call the function like on this line here line five for it to do anything so now if i call the function it'll say hi there rohan you look great but let's say you know i got out of bed late this morning we can change the variables we pass this function and say either one you look okay and again if you add if you wanted to add a third variable we could just simply add add it like so let's put is cold today like that and with that we're at the end of the lecture i hope you found the content we taught today interesting and i hope you learned something bash scripting is tricky so if you found that confusing don't worry about it this is not something we'll be testing you on but it's a cool extra credit opportunity and we will be offering you guys extra credit uh if you can do some bash scripting later on this week so if you have any questions make sure you drop the discord r on twitch and i'll see you the next one

[SUMM]
The objectives for today are to teach a few more commands in bash, go over logical operators, go over text editors, go through aliasing, and potentially (as a bonus) go through bash scripting. The sudo command is used to give the user root privileges, which are more or less administrator privileges. BE CAREFUL WITH THIS. sudo can delete important files. The echo command is used to print into Bash and is useful when determining errors within long commands. The find command is a powerful command used to locate files, and it can be used with the -name flag followed by a file to find the path to specific files and the -delete flag to delete found files. The grep command is used to search for text and return matching lines in a given file, using the -w flag will return exact matches, and using the -i flag will make the search case insensitive. The diff command is used to compare two files line by line and identify the lines where they differ. && is an and logical operator and lets you do commands sequentially. II is an or logical operator, and it will try the first command and if it fails, it will do the second. The ssh command is used to log into and do operations on a remote machine. There are many different text editors in Bash. vim is a terminal editor which opens in command mode with many keys. You can use -i to enter insert mode. In order to exit vim, you need to return back to command mode. Another text editor is known as emacs, which is similar to vim. The important keys are ctrl, the meta key, and esc which are combined with a variety of different keys. Another text editor is nano. Aliasing is a tool used to create bash shortcuts. Scripting is used within bash. You can run scripts by typing bash followed by script name dot sh. You can create a variable by declaring it and choosing a variable name. -eq is an equals operator for numerical comparisons and -ne is a not equals operator for numerical comparisons. == is an equals operator for Strings and != is a not equals operator for Strings. Loops are useful. Functions are useful as well.
[SEP]

[TEXT]
okay let's get out of this all right hey everyone and welcome back to cs196 and welcome to python one so as we mentioned the start of the class we want to teach you concepts using python and rust we can't teach you those concepts unless you have a rough understanding of how the language is actually going to work so we're going to do the basics of python today and on thursday sammy's going to cover a few higher level concepts too so with that being said let's go over objectives so firstly we're going to go over what is python what is pythonic code that we're going to go over super quick setup info i'm not really going to touch on it too much but just in case you want to run the code alongside then we're going to cover quick hello world variables conditionals that loops functions lists and finally exception handling so a lot of this you might have seen already in 125 or if you've programmed another language you might have seen this already but we were covered in python and exception handling might be something new to you even if you have taken 125. so what is python well pretty basically it's a programming language in the end okay no we're going to go a little more in depth than that so you guys will have talking points interviews and stuff so python is an interpreted object-oriented high-level programming language with dynamic semantics okay that's a real mouthful this system exactly from the python documentation so let's actually go through this line by line and try to explain what that means so let's go through interpreted so interpretive languages are run by an interpreter which reads the code line by line so unlike programs like c sql plus or java which compiles a whole code and then runs it python will take an interpreter and read it line by line and run it line by line instead of making one executable and running the whole thing but actually it's a little more complicated than that python isn't just interpreted it's actually com has one compilation step into bytecode first and by code is just a low levels of instructions that can be read by the interpreter and it's a very quick compilation and it basically lets the interpreter read things a little quicker and those files end in pyc or dot pyo and don't worry that made no sense at all you don't need to know it it's just a cool fact that i think it's good to bring up an interview to show that you understand the language beyond just knowing how to use it and python files have a dot qi extension so what is python again it's an object-oriented language as well so object oriented you probably hear this a lot essentially it's a programming paradigm center on the idea of using objects seems pretty self-explanatory but objects essentially abstract away complex problems so instead of writing a list every single time you can use the list object to make your life simpler essentially they abstract away the problem so you have a higher level understanding of the code instead of using traditional lines of code and data we can just use objects instead finally we have a high-level programming language so essentially a high-level programming language has strong abstraction of the lower level aspect of the computer 

[TEXT]
so essentially what that means is instead of making you write in zeros and ones or like in c making you allocate memory and do really nitty gritty things like that it'll handle water for you at the cost of hiding more things from you so you lose a little bit of control but you have a much smoother experience and it's great especially for new programmers so what is pythonic code so i'm going to touch this very very quickly samuel go over it more later but pythonic code is simply a design choice to produce highly readable python code so python veterans will usually write in pythonic style instead of writing code that's very c-style or java style in python so note poorly styled code can still do all the things that beautiful pythonic code can but codemains is essential for real developers and you guys are all going to be real developers eventually so you should focus on writing more readable code and pythonic code is really the epitome of that dynamic semantics is a great point it's just a very essentially it's a nitty-gritty of how typing works and how uh it's read by interpreter that's not too important so finally a good rule of thumb which i think you guys should remember is if you can write less while maintaining readability in python do that again i'm not saying try to compress your entire program function into one line if it's super messy and doesn't make any sense but if you can make it shorter and easier to read definitely do that and chi floor pythonic is actually an official term that people use and here's some good examples i'm not going to get into it too much because samuel will cover it later super quick setup info so here's the links to the documentation to help you set up on different os's and it's just another article i found is pretty useful we're also you can also use an online editor like replit so for a lot of the code you see today if you have the lecture slides opened up you can just click on a link which i'll keep next to it and you can actually run the code that we're using today and it'll be really useful so let's do it our very first python program so let's say you read those articles i had in the previous slide recommended ids for python i'd say vs code i use vs code for everything so our very first python program so let's say we set up everything in the previous slide how do we check that everything is working well as with most languages we're going to create a hello world program and this is super easy way to check in the environment stuff correctly and we have all our packages installed it seems like it might be very like irrelevant but even for people who've been programmed for years and years i still do this when i'm starting a new language and i set it up 

[TEXT]
i'm going to print hello world so i know that everything is in place so after we create our dot py file with the code we can run the script in bash by writing python and then filename dot py or python3 so that really depends on how you set up python i'm not going to get go into that too much but let's go to how we print stuff in python so when it prints up in python we just write print put a bracket and then we put whatever we want to print in there within speech marks so you've probably seen this a lot in other languages okay i'm just going to have vs code here so we have print hello world we have that file here let's open up our i term don't look at that so if i run this it does says hello world okay cool so we know they're officially set up and this is the first thing you guys should do when you're setting up python your machines for the rest selection i'm not going to use yes code i'm going to use reflect that way uh you guys can follow along too okay do we have any questions about anything i think that's pretty straightforward yep okay no questions so let's get into the first thing variables so quick recap of variables variables help us store stuff in our programs the reason i say stuff and not data is because we can store more than just data within variables so you can think of it as a box you keep things in numbers strings references to other variables data structures objects anything can be stored inside a variable you even have nothing inside a variable which i'll cover soon so variables in python are cool because you don't need to specify a type and this is known as dynamic typing different data types include integers floats strings booleans but when you declare these variables you don't have to specify the specific type you can just say x equals and put whatever you want python will figure it out for you this can be a gift and a curse as you will see shortly another important time i want to cover is the nun type so from w3 schools the exact definition i got was none is not the same as zero false or an empty string none is a data type of its own called a nun type and only none can be none so you can't important thing to understand is that none isn't a useless thing it's actually really useful books can use an empty placeholder because you can't manipulate the nun type 

[TEXT]
so if you want to declare a variable but keep it empty have nothing in there the nun type is a perfect option because let's say you actually forget that there's nothing in there and you try to do something like you know you add three to the variable your code will crash because you can't do that with the nun type exactly none in python is like the null in java all right so we have this code here i'm not going to have replicas it's pretty basic but if we look at this we say x is 4 and we change the type x is a list now and we say x is a string now and we print x what do you guys think is going to happen what will be printed just drop a message in the chat i'm yeah i'm a chameleon yeah exactly the string so as we said before dynamic typing means you don't have to declare a type and also variables aren't restricted to a single type it'll automatically allocate space for whatever you need so now we have conditionals so famous if else so this is an incredibly powerful way to let you make decisions in your code so let's look at some operators that we have so we have a few basic ones we have equals equals and that's true if the values are the same not equals it's true values are not the same uh greater than or equal to less than or equal to greater than less than those are pretty self-explanatory i think we have two new ones that which pretty good need to pipe on we have is an n so is text if you're referencing the same object so you could say something like if we say x equals three and then go if x is three it'll return true we can also do this if we say x equals a for example let's say we have two variables x and a say x equals a and do x is a that would return true because we're referencing the same object so this is better if you're trying to reference whole objects not specific values then we have n and it's pretty self-explanatory it checks if a value or an object can be found within another object so any questions about those okay cool all right so let's look at this code here you can run it by clicking on the link here it'll open up replit which you can use what do you guys think is going to happen with this code take a look at it drop a message in the chat and then i'll run it so i run it so let's try the else case let's say five we put five it says we have just five instead okay yeah input let me explain that line very quickly someone asked what is input well input as you can see when i run the code it'll prompt me for whatever the message says and then whatever i type in here will be stored into x so if i put two x will now be two i hit enter it'll say we have two instead so someone said if we enter 196 it'll print the favorite thing 

[TEXT]
so let's let's see if that happens 196. wait it didn't say we have my favorite number just says we have 196 instead that's weird well some of the more eagle-eyed people here have noticed that it says conditional date up here why did that happen let's go into full screen well dynamic typing can be a gift and also a curse unfortunately what happened is when we took the input it takes input as a string it can be because we could have put abcd in here or any other string so even though we put only numbers or integers in those are actually a string character so what we actually have to do is that we have to cast the input string to an end so casting essentially means taking whatever we took the initial data type and changing this data type to something that we can use so casting is a pretty common suggestion that you use in many languages so let's run this code now yep sorry if you guys got baited it's a super common mistake the reason i put it in there because i when i wrote the code the first time actually had that bug and i think it's a good example of that so now if we put 196 we have my favorite number so while wrestling just says can we do int input yup you totally can do that the reason i put it separately was just explicitly show the dangers of dynamic typing and why we have to be careful about it so yeah that's a great point and this is great this works so we're really happy because we were able to use conditionals and we were able to handle dynamic typing so what if we have more than two conditions so i'm sure in java or c you just do if else and then within the else condition do you if else some other condition and you do if else some other other condition no this isn't very pythonic it's kind of messy and it's really open easy for you to have like logical errors using this method well it's more commonly used and python what i'd say you have to use especially for this class is the lf statement elif is a short for else if so you if some statement if that statement is false we'll do else if some other statement else is some other statement and you can keep having those and it's very very clear what the intended purpose of this string or this set of logical operators wants us to do and finally we hit the l so if all these other statements are false we use the else statement instead so there's no if necessary statements so faculty are asked are there no necessities statements that's a really good question we can use that for statements again bad code or badly style code will still do what we want but we'd rather use this because it's much clearer than a nested if statement 

[TEXT]
it'll still work yep duty says exactly nested if statements not epic does equals equals not work for strings i believe this should work for strings but i can double check that yeah i'm pretty sure it does okay so let's look at this big chunk of code we got here so it's very similar to before but let's say if it's 196 we say it's my favorite number alif so if this is not true we run we check if this is true if it's a multiple of five so this operator here percentage sign is just modulus what modulus means is if we divide x by 5 what is the remainder um i'm sure you're familiar with that and finally that is also not true we just print we just have blank instead so as a sanity check let's see if we put 186 what happens we have my favorite number but if you put 195 it says 195 is multiple of five because we failed this this case here or this um logical statement here but this one was true so else if we go into there so any questions for that what if you put a string that asks you for a number well if you try to cast a string it'll just crash so let me put rohan here it'll crash because we can't cast a string into base 10. some other languages will actually let you cast that because each character is technically an ascii number which can then be casted into a integer but c python sorry will not let you do that c will let you do that yeah so that's a good question someone asked you not any parenthesis after if and left no you don't need parentheses so that's all something's pretty python and you can put parentheses here if you want for clarity but you don't need your python's pretty smart understand you put a colon here and understands that's the end of the logical operator so normally in pythonic code you don't put the parentheses because it's just extra noise that's not necessary someone asked if we have 195 that started would it print both another great question unfortunately no won't print both because if it hits the first statement it'll just do that because this is else if so else means if this is false and this is true it requires on both those conditions not just one so yeah good questions guys conditional is continued unless you want to have multiple conditions the same conditional statement you can use the and or the or keyword so you can do like if x and this is true or if you use or instead so to for someone who said you want the same thing on one line we can do this instead we could do if x equals equals 196 or an or is a keyword it'll get highlighted or mod5 equals equals zero we print my favorite number so let's run this 195 hit enter we have my favorite number 

[TEXT]
okay moving on any questions before we get into the hoop how do you print a new line in python so the new line character in python is backslash n that's pretty common so if you want to print just a new line you do print backslash n like this but something to note is if you print in python it automatically adds a new line character at the end there so notice how um if i print two things here hi and then print 196 they won't continue on the same line they'll both start a new line because the way the print statement works in python is that it adds a new line character to the end of whatever string you're trying to print linker kind of asks why did one under 186 not work at first it didn't enter first because we inputted a string so when we inputted a string a string is not equivalent to the 196 number 196 in brackets or sorry in speech marks like this is different to 196 as a value like this how does python know in loops end so python knows when your loop ends because of the white space here you need to have white space in python that's actually a good point there normally when you're using your favorite ide if you just hit enter from an if statement it'll automatically tab you four spaces so you need to have that white space in python actually let me zoom out a bit that's clearer um whereas in java you might have like uh parentheses like this python doesn't use that python instead uses white space to indicate that you're within another layer of like an if statement or like a for loop great question what other questions do we have matt zombie that's a good question so we asked in your conditional with x or y if this is true will it evaluate y nope if this is true it's going to go right the condition it won't even check this so you can put like garbage here like doing weird stuff with none or something that'll break your coat and it won't get hit as long as this is true um other questions let me quick skim okay cool i think we're all good there let's go into the kahoot if you haven't joined already here's the code i'm gonna start the kahoot in about one minute i'm gonna paste the code here too and if you have any questions i will answer them later too all right i think we have everyone i'm gonna give it 30 more seconds that we're going to join so oh also i'm going to note that if you're top five in the kahoot you'll get extra credit just for fun because there's a lot of important stuff and if you've been listening then i think you should be rewarded for that most your projects will be in python or typescript anyway okay i'll help you out oh hey is five what's your net id okay it says you're not in here 

[TEXT]
so all right i'm gonna start in one second we're starting true or false is python a compiled only language that's pretty quick guys good job that's the first question yep is python a compiled only language can we have the music let me know if you can hear it can you hear that sad yeah i don't think i have my audio recording on 40 seconds if nobody answers the next 10 i'm gonna skip somebody answered i think that's everybody that's good yup all right unless you got it right false so python isn't a compile only language python is officially it's an interpreted language if you want to get really nitty-gritty there's one compilation step where it goes from your python code to bytecode and then that's interpreted but most people just say python is an interpreted language good job guys unless you got it right there's the scoreboard true false write pythonic code less code is usually better good job moisturizer that's super quickly i'm gonna give like another 20 seconds for people with like latency issues just for an interest of time we'll just be on the midterm this class has no midterms so don't worry about that five more seconds and i'm going to skip all right again most you guys got this right yep pythonic code a good rule of thumb is less code is usually better as long as you're maintaining readability no quizzes no final so you're totally fine leaderboard again next question what would this chunk of code do some people just guess the answer to so don't worry if you're not getting super quick there's four choices because there's four options this one's a little tricky so uh think about it i'm gonna give it 20 more seconds 15 more seconds actually okay so a little mix here that's totally fine this was kind of tricky so this is actually going to fail on line two because if you have the nun type and you try to manipulate it it'll crash you can't do anything untyped you can't you can print it out but you can't do stuff like adding to it dividing it etc etc none is not it's no you try to mess with null your code's gonna crash so good job leaderboard good job first place maintain your spot what will be printed at the end of this code snippet here's another photo again this isn't super obvious so read it carefully you're on question four because this is question four tim's how all right so emily cross how is the nun type of placeholder if you can't manipulate it well it's a placeholder because let's say you just want to define a variable x but you don't have anything in it at the moment you put none in it because that way if you forget about and you try to manipulate x it'll crash and you know it's a reminder to you that you put none and that you wanted to put something real inside it later so it's just a placeholder because it can let you define a variable because you can't just declare a variable with nothing in it 

[TEXT]
in python so you just define an empty variable essentially or if you want to clear a variable you can put that instead uh quickplan i don't know how you're on question five i'm sorry all right four seconds we have latency issues so i understand why it's taking a little longer five four three two one okay oh great i thought you guys would trip up more here but you guys are clearly smarter than i thought so great job uh so the reason is case two is because if you go to the first line here this is false because x mod 3 is not zero this is not divisible by three so you won't go here but here x not seven two hundred mod seven will give you a number that's not zero because two hundred isn't divisible by 7. and because it's not 0 it's evaluated as true anything not 0 is true in most programming languages to be honest so this will be true you'll print case 2 and you'll never reach these lower lines here yeah a little tricky which i remember is this won't give you true or false this will return a value and the value returned wasn't zero and because it wasn't zero it's evaluated as true yup sorry if that was a little tricky uh but you guys are good job unless you guys got that right so excellent work so back to the lecture for the next half of content and this is where stuff gets a little harder with python at least so loops so if you don't know what a loop is a loop allows us to repeatedly run the same section of code oh wait only 10 people got it right oh rough i thought most you got it right that's my bad my bad yeah good job the 10 people got it right thrust you i am sorry uh so we're going to cover for loops and while loops and python those with main loops i think it's only loops actually so here is the general pseudo code for how we do for loops in python so i want to emphasize something it's very different to what you normally see in java so in java you write you declare a variable like int i while i is less than something you do i plus plus so here this range function handles all that for you so you say for i or some variable in a range you do stuff so it just claims code so if we do 4i in range 10. essentially what this is saying is we're declaring a variable i for int i equals zero while i is less than 10 it defaults to i plus plus so we default at zero if we don't specify the first number and we go up to 10 but not including 10. so think of it as anti equal 0 i is less than 10 i plus plus that's the case in your for loop and we'll just print i and again we could follow all these code samples here and thankfully they're all on one big one here 

[TEXT]
so we can just comment the rest of these out and if we run this it's just gonna go from zero to nine as expected so next another way we can do this any questions oh the shortcut for commenting is command or control forward slash that's super useful uh highly recommend using that instead of just typing a hash key so here we specify the start value and the end value the start value is inclusive and the end value is exclusive what i mean by that is if we put 2 here we'll print 2 and we'll go up to 10 but we won't print 10. we'll print 9 instead so let's run this it's gonna go two to nine instead this is the code sample that we just saw previously as you can see two to nine as expected makes sense right all right cool here i'm just gonna do something real quick okay so now something really important is and very pythonic is we don't need to specify uh the step inside the loop here we don't have to do i plus equals two or something weird like that what we can do is if we have a third optional parameter we can specify this step so what this is going to do is starting from 2 is going to keep adding 2 to i up until we reach 10 excluding 10. so what this does is it'll go from 2 to 9 adding 2 but 9 won't be included because when we hit 8 and we add 2 to 10 we'll be out of the range so that's a little complicated if we hit 8 and we add 2 we're at 10 which is outside the range that we specified here so we break out of the loop so someone said why does it print so for i in range two to ten why does it print from two to ten instead of three that's just the way python works it's inclusive of the start exclusive at the top end and i'm sorry that's confusing that's how the language works okay a cool thing with this as well is that if you use a negative number um we can iterate backwards to a list if this first number's uh bigger than the second number here if we do it backwards but this is let's put minus one here but this is smaller this is bigger we'll go into a forever loop because we'll never reach that top number so if you see that in the code this is what we just saw down here when i run it we go 2 4 6 8 we won't reach 9 or 10 because that's already outside the range okay enter inside the range no you don't need to have integers inside the range okay so now another way you can do this is you can do n so someone asked can you give an example of n well we have it right here so this is pseudo code again so we can say for a variable name in a data structure 

[TEXT]
we do stuff so this is a list in python we will cover that very very shortly so don't worry if that is new essentially it's very similar to an array but it's definitely not an array not an array list is not an array uh so for value in x print the value so no words for explaining what this does is that essentially what it'll do is it'll just print every single value in x 196 like that this is a very pythonic way of doing it because uh it's two lines of code and it's very very clear what's happening here but if you want to see a c style version of this or a java style version you could do it like this for iron range length of x print each uh individual element within there and that'll do the exact same thing here oh i should commented this out my bad it'll do the exact same thing put 186. all right so it's pretty basic so now we have a while loop so while loop is very similar to java or c this is pseudo code so while some statement is true we run the code and ignore the is being highlighted there that's just um the id being weird so for example sorry about that let's say x is hundred while x is greater than 50 print x and then we decrement x by one so minus equals one what's cool about this is it's a it's operating for any normal operator so you could do plus equals multiplied equals divided by equals so this is essentially decrementing x by one each time and then printing it usually is is used more so i'm going to ask is it is used more than equals equals it really really depends i'd say to be safe use equals equals for the most part because that's evaluating values but if you have to evaluate objects use is so here we have an example code of that if statement here the while loop so if i run it we go from 100 all the way down to 51 but then once it equals 50 so it's no longer greater than 50 we don't we break out of the while loop but you got to be careful because if you don't change the condition or if the condition is always true or uh you aren't incrementing or decrementing the value of x so example while true it'll just run forever and you're going to crash your ide or whatever you're using now your id so you're going to crash your um bash or replay or whatever oh my bad x equals 50. this is never going to end because this condition will never change while true is always going to be true any questions about those loops how much card not so fast it's just when a command or control forward slash so i'm going to close this so we have break statements so notice how we were stuck in that loop forever we couldn't do anything once we're in that loop but what we can do is use a break keyword 

[TEXT]
so if python reads this it'll break you out of the current loop so what do you guys think this is going to do take a guess gander what you think it's going to do and while you're thinking about it i am going to load up the code any guesses for what it's going to do so let's go through it line by line so four character in cs96 so one thing i want to note is that list strings in python are like lists you could treat like a list it's going to go through each character one at a time so if the character is a space a space is right there we print an empty line and we just break so i'm going to run we print this 96 and we break but notice something cool happened we didn't print each character on a new line that's because i replaced the new line character here with just uh empty sp like no space so this will replace it with whatever you want so i put like um an underscore here instead it will replace the new line character at the end of the print with underscore like that pretty cool right awesome okay workstation is super useful especially for those cases when you're within like a loop i do want to notice note though that if you're in a double for loop and you use break you'll only break out of the inner four loop or whichever loop called break it won't break you out of all the for loops so functions so sure functions aren't new to you but i'm going to go quickly a function is a block of code that we plan on reusing instead of writing the same code over and over again we can write a function instead and call the function instead so to clear a function python we follow this format so we'd use the keyword def give it a name and we put the arguments here so notice that in python you don't define a type for your function so you don't need to define return types or the types of your arguments dynamic typing will handle all that for you so here we have an example here example code here you can run it i'm not going to go through it because it's pretty self-explanatory and to save time but let's say we do death greet name time of day we put someone's name and then one of these letters it'll print hello or good morning and then that person's name and you could try that later this is a very basic way of very basic function we see here so to call a function we do function namely put all the arguments like so so for example we do greed rohan e and what that would do is it would say pass rohan here e here and say print good after uh good evening rohan easy so a function will return to the code that called it once the function is finished running so if you want to manually leave a function we use the return keyword 

[TEXT]
so return will return to the code segment to call the function and if we write return and then a list of variables after it'll return those variables so let's look at that over here so notice this here right i'm actually going to run this because this is pretty useful so if we do define a function here if x is greater than zero return one if it's equal to zero return zero and if it's not return if it's less than zero return minus one so notice how we're returning something here if i run this we return those values and print those values one after the other so if you you could put a list of things here you could play multiple things and we print it it'll return a bunch of things and it isn't like constant or static and here's a cool example of getting two numbers back uh so you can go this code in your own time watch how we return two things back so it'll print two things try this out in your own time is return to python cylinder java yep very similar now we have lists so lists are collection which are ordered and changeable and duplicates are allowed so lists can remind you of arrays but they are not arrays the reason i like arrays is because arrays uh lists are resizable they essentially make your life a little easier and had a lot of the complexity there's more information about what a list exactly is in different kinds of collections on w3 schools if you're curious so in python the types of elements within the list don't need to be the same and we can use lists or multiple values using one variable so again all the code is here so let's open that up you define a list using just empty square brackets and you can put values in it like so so this is all strings but i could put numbers in here instead of just strings or anything that i want essentially and as an element we use the square brackets followed by the index that we want and remember that python index are zero indexed like that and this will print the zeroth index it'll print c and this will print the third index so zero one two three or print nine but if you do these lines here your code will crash so be careful if we get the length of a list sorry you write when x or whatever the variable is and we'll print the line so this will return one two three four five so i did speech text that's very similar what you see in java but i want to watch slicing now slicing is a very pythonic way of getting a range of values within a list so if you do two colon fiber something colon something you'll start at this first value here and go up until this last value so here if we go zero one two three four five so five we don't reach five we stop just half below before it but we'll get 196. so that i want to show you guys so look at the top thing here we get 196 like so and now notice that if we don't specify something after the cold or before the colon we go to the end or start of the list respectively 

[TEXT]
so two to five here the same is going to be two colon nothing because that just specifies going all the way to the end and if you do zero to two it's equivalent to writing nothing to two because that means we're from the start of the list to the second now go out of bounds you won't go out of bounds and you specify nothing here because it'll just stop at the end and yes these are indexes here so these values here indexes the colon separates the starting index and the ending index so like in a lot of other languages lists in python are simple arrays of bytes and there's no so a string can be treated as a list essentially there's no single character date type like other languages a single character is just a list of length one so because of this fact we can treat strings like lists so for example if we do s and slice it from the second index to the end we go zero one two to the end it'll print 196. sunset with you minus three if you minus three it'll actually start from the end and go backwards it'll go zero one two three and then go forward like that here's a bunch of util list functions uh i'm not going to go through these in-depth because you're not going to be asked about these these are really useful what they want to talk about though is sort so sort here will sort your list using the time sort function so instead of writing your own bubble sort or something like that using the sort function that's built in is a really powerful tool could use the time sort algorithm it's very very fast and you switch your list very quickly so remember that because it's useful for like interview questions and stuff so looking at time i'm not sure if we can quickly go through exception handling uh but don't worry it's too much this is a little more advanced and sami will probably cover it again so when an exception or error occurs python will stop running and send us an error message it's not a graceful exit but if you use exception handling we can handle the exception without crashing the program so to do this we use the try except and then the finally commands so if an exception occurs in the try block python catches the exception and moves on to except block and runs the code in there so what would this code do so if i open this up while it's loading this goes to crash you can't concatenate a number to a string it's just gonna crash but here's what we can do instead let's say we do try x plus equals two if an exception happens within the try block here look at the pointer the try except happens here we'll hit the exception case here and then print we hid an exception instead that's exactly what happens 

[TEXT]
so i can show that here let me comment this out if i run this instead of crashing it's going to handle the exception catch it and move us onto the accept statement is similar to java try catch very very similar yeah so the code in the final block we run regardless of whether an exception occurs or not and this is an optional step usually you won't use it you can just write try accept but it's useful if you're returning or exiting from the program essentially it'll just do whatever is happening finally before returning or exiting so for here example if there's an error here it'll print the error but before returning it'll do whatever function we have here so does that make sense that went pretty quickly okay i would talk about this very quickly because i think it's really cool and fun so when to use try accept over if else so if else always has a cost to that comparison however try except the other hand is very minimal cost if no exception occurs but if an exception does occur it's very expensive so this is known as branching and you'll cover that in 233 don't worry about it too much all you need to know is that if else we're always going to compare if and else but with tri-except we assume that try is almost always going to happen so we don't really uh give a lot of time to the except we just assume it's going to be try but if an exception happens it's very expensive to like account for that risk so therefore use try except exceptions are rare like less than temperatures of time otherwise you can use stick to else so i want to show you that here and the stack overflow article here explains it really well but you can run this code here what what it does is it runs like a 10 million whatever number that is iterations using if else and then same code try accept and while this is running in the background i will answer any questions you guys have so any questions about some stuff we covered right now they've made money on the program nope it's computational time so any questions about try accept or list because we went to that kind of quick can you another try accept and explain it yeah for sure so if we look at this code here right let's do something we can't do that example with the none so let's say x equals none uh try x plus equals three except prince uh none hit like this so oh sorry i'm trying to zoom out if uh x is none and we try to add something to it normally the code will crash but if you have something in the try block python is like okay this could potentially crash so i'm going to make sure to catch any exceptions the exception that happens here 

[TEXT]
i know that it's going to happen so i catch it and i move into here instead the code will continue to run none hit and then i can run more code here and that'll work okay any other questions about what you guys saw today regarding lists or error handling anything else rewriting python what's the finally thing so finally with try except basically what finally does is this is still loading for some reason i'm not sure why what finally does is regardless of whether try happens or accept happens finally we'll be wrong afterwards so if in one of these cases you return so let's see this exception and you want to return like leave the function you can still run some code in the file block before you return is what it's saying uh don't worry about the kahoot if you're if you answer a question you'll be fine why not put the code outside the finally so duty of your question i thought i also thought it was kind of useless to have this here but actually let's say i put the return here and there's no uh finally finally tag here you'll just return you won't run any more code what finally lets you do is finish and do some cleanup before you return and leave the function lists are filled using square brackets and arrays are zero yep is there a big difference in big orientation for trying if they go notation no but if you're looking at actual to speed and like the way the low level stuff works yes and i'm trying to run this for you guys but it's not opening up for some reason if it doesn't open up i'll run on vs code we're going to run our vs code so we have the speed test here so it's going to take a couple seconds uh because it's a very very big number that we're trying to do that's the code and we're going to do this many iterations a lot of iterations but notice how much quicker so it took 14 seconds for if else and only 7 seconds for try except yeah python's relatively slow language because uh it's written in c and everything is uh nothing too much uh in depth but essentially everything is malik like a lot of memories handled slowly because you don't control it yourself it's handled by the interpreter and the compiler so it's pretty slow in that regard any other questions guys also if you were here

[SUMM]
The objectives for today are to get setup info, print hello world!, variables, conditionals, loops, functions, lists, and exception-handling. Python is a programming language. More specifically, it is an interpreted, object-oriented, high-level programming language with dynamic semantics. Python files have a .py extension. Object-oriented is a programming paradigm centered around the idea of using objects. Objects are abstract data types. Python is a high-level programming language. Pythonic code is a design choice to produce highly readable Python code. To create our first program, we create a .py file and run the script in bash with the command Òpython <file-name>.py>. Variables help us store stuff in programs. Dynamic typing in Python means that you donÕt need to specify a variable type. None is a variable type used as an empty placeholder. Conditionals are an incredibly powerful way to let you make decisions in your code. The operators used are Ò==Ó, Ò!=Ó, Ò<=Ó, Ò>=Ó, Ò<Ó, Ò>Ó, ÒisÓ, and ÒinÓ. If we have more than two conditions, we use the elif statement. Loops allow us to repeatedly run the same section of code. The for loop uses the range function to establish how many times the loop will be run. The range function is inclusive at the start and exclusive at the end. The ÒinÓ operator can also be used in for loops. A list is not an array. The while loop says that while some statement is true, we run the code. To leave a loop early, we use the break keyword to break out of the current loop. Functions are blocks of code we plan on reusing. There is a specific format for functions. A function will return to the code that called it once it runs, and you can use the return keyword to manually leave a function. Lists are a collection which is ordered and changeable. Lists are simply arrays of bytes. When an error occurs in our program, Python will stop and send an error message. In order to handle these, we use exception handling with the try-except commands.
[SEP]

[TEXT]
and the way that you find the length of a list is by wrapping it in this len function and this handles all of the incrementing for you it handles all of the bounds of the loop for you um and then there's also the for each loop in python for each loop all we have to say is for the elements in the data structure that you're looking for so in this case for instructor and instructors you will be able to have access to the values of every single element in the list and so the first one up here would print exactly what the second one prints out but the first one is an index for loop the second one is a for each loop and finally we have another traditional loop a while loop very standard just like any other programming language however again the main distinction is that indentation actually matters in python rather than what you see in languages like java so functions a bit different as well as we saw with variables you don't have to specify types it's the same thing with functions so here we don't have to specify what type this function returns we just have to declare a function by using this def keyword with the function name and then the parameters same thing with the types and then just like usual the return statement is the return keyword very very standard stuff and nothing too crazy uh we talked about the list data structure so we talked about how python uses lists and so a very big thing that we want to touch on again is that lists are lists they are not arrays and what that means is that you know you're probably used to arrays and so uh arrays are fixed size you can't really you know add things if it's beyond the you know size of the array so lists are much more flexible than arrays they're a lot easier to work with and they're a lot easier to use so these are some of the useful list functions we talked about so if you want to add something to the end of the list you use the append keyword the append function you just you put in the parameter that you want to add uh if you want to insert something at a certain location on a list you just specify what location you want to insert the elements in so in this case if you want to insert at element at index zero you can just specify that with the insert function uh these lists have many different functions including things like sort etc so lists in python are very useful data structures that you'll use quite a bit and someone asks so are lists like arraylists in java yes they are the list data structure rather than the array data structure so for those of you who are in cs125 right now that might be new to programming you will learn how to use and implement a list in java later in the semester but for those of you are already familiar with lists in java yes this is very similar to the array list in java so let's go ahead and get to the main content for today 

[TEXT]
uh that quick review is hopefully things that you should already know by now uh rohan went over it very nicely on tuesday and we've had a bit of practice with it in the homeworks if you've started that already so today we're going to talk about first what is pythonic code and so pythonic code is something that we want to touch on because it's really why you want to use python over you know a language another higher level language so pythonic code means that when you're writing code in python if it's pythonic it's not just correct code it's not just code that compiles it's not just code that is technically syntactically correct but it's also code that is writing python in the way that python is intended to be used and so what does this mean what is a good example of that well in other words python is a really really beautiful language i know it's kind of weird to call a programming language beautiful it sounds like i'm a nerd for saying it but once you get more experience writing python you will see exactly what i mean python is a beautiful language and it can allow you to write super clean elegant beautiful code in ways that you can't really see in other programming languages and so this is what it means to be pythonic and so we'll have some examples here so uh stop simping over python show us what you mean this is probably what you're thinking and i will do exactly that i will show you some examples so let's see some examples so let's say i want to find if an element exists in an array if something is inside of an array if i have an array of numbers and i want to see for example if 5 is in that array so let's see what this would look like in java for example so in this case we don't have numbers let's say we have an array of fruits and i want to see if this cherry string is inside of this list of fruits so that's what we have right here and let's say i want to update this boolean flag found if i find it in the list and so what we would do is we would have a for loop we would loop through the length of the array and once we find an element that is equal to cherries then we'll change found to true otherwise it will stay false now this isn't terrible i mean this is completely fine if you were in java like this is how you would write the function very likely but in python we can do this very beautifully but first let's see what it would look like if we directly translate it to python and this is something that i want you guys to kind of try to sway away from try to sway away from writing java code in python because there's a lot of the time a usually better way to write it in python 

[TEXT]
it's usually there's usually a pythonic way of writing it so here is what a direct translation from java to python would look like you would just translate all these lists and then loop through once you've found cherries found is equal to true so this is what it looks like um but what does this look like pythonically how can we do better how can we use python in the way that it is intended to use so here is the code um let's say we have our list of fruits apples oranges bananas etc what we can do is just simply say cherries in fruits which which will return a boolean value of whether or not cherries was found in fruits and so this is a good example of what it means to be pythonic this is not really something that you'll find in many other programming languages this is a very python specific feature but it allows you to write very nice beautiful elegant code and so i could run this code for you but i think it's fairly self-explanatory it'll just basically update found to true if it found it and false if it didn't in this case found will be false because cherries is not in fruits not in this array at least so this kind of idea allows us to enable it enables us to write very readable beautiful code that reads just like english so here's an example of how we can utilize this idea of if something is in another language so let's see let's see if we can solve the question of if a hot dog is a sandwich so this is a very controversial idea and there's a source that i've been sent called cuberule.com that says that a hot dog is not a sandwich but let's see let's see how we can write this in python we can we can have a list of sandwiches according to what cube rule says and so we can say if hotdog in sandwiches rather than what we saw in java where we would have to loop through and actually say well if hotdog is at one point in this array return true we can actually in python just say if hot dog in sandwiches return yes a hot dog is a sandwich otherwise according to a cube rule it is a taco so this i can run this code but it will just print out according to cube rule as it is a taco if you are very passionate about this idea of uh you know if a hot dog is a sandwich or not there there is a link right here that you can read about uh i'm not very passionate about the idea i've gone down that rabbit hole way too many times but if you're interested there it is for you so let's go through some more examples of what it means to be pythonic and how to write pythonic code so first we already saw the in keyword let's see some more things 

[TEXT]
so let's say i want to sum all of the numbers from 10 to a thousand so like we said in java you would just simply say let's have our starting number our ending number and then a a variable that will store the total sum of the values in between 10 to a thousand and we'll just basically sum up all of those numbers and if we want that that value we can just print out total sum or return it in a function so this isn't terrible right i mean this looks fine but how can we do better if we wanted to write this in python is this what we should do should we just translate our java code over to python well in this case we shouldn't we should actually utilize the features that are in python we can write this much more pythonically so what does this look like pythonically well in python we have uh you've already seen the range function this is the range function that you would see in a for loop where you say like four i in range of you know some range so the range function will give us the numbers from ten to a thousand uh with in this case a thousand and one because this is the upper bound uh not inclusive and so if you want to sum up the numbers from ten to a thousand and one non-inclusive uh we just wrap it in a sum function and this will give us the total sum and so this is so much nicer to read in terms of english in terms of elegance this is what it means to be pythonic and this is the kind of code that we encourage you to write when you are writing python uh and i can execute this uh here if you would like you can the slides are available you will see that this will return the same thing that this would return so here's some tips for writing pythonic code um pythonic code isn't something that you'll be able to write from the first day that you learn python because there's a lot of ways to be pythonic and so um here's my little tip for how to write pythonic code it's something that takes time and so if there's something that sounds like you might need to lift your finger up just a little bit too far uh if there's something that that sounds just too much for your python royalty and you just cannot be bothered then just simply google what you want and then you will likely see you know a pythonic way to do what you want and over time as you do this more and more you'll find a lot of ways to become pythonic a lot of different tools and techniques to do this so for example if i wanted to find a way to reverse a list and so in java i'm sure all of you can imagine a way to reverse a list you would have to you know loop through things stored in a new list etc uh 

[TEXT]
but in python you would just simply google it first if you don't know how to and you would find something like this you would see that there is a very very pythonic way of doing it using slicing slicing is a concept that rohan taught in the first lecture you can you know simply with just one line of code that is very readable very understandable reverse your list that originally looked like this into something like this so there's a lot of different ways to be pythonic and it'll take time but this is how i recommend you go about becoming more pythonic and in this lecture we will go through a couple concepts that will allow you to be pythonic in your own code let me go ahead and see if we have any questions so some people are asking if i'm throwing shade on java but not telling us the sum function well you see the point is uh it's not that java doesn't have a sum function or something it's just the combination of python features right uh as far as i know java doesn't have a range function unless i'm missing something or i haven't in java code in a while um but it's just python code is just the idea that python has a lot of unique features and so using them in this kind of fashion to write cleaner more elegant code more readable code it's something that you can't really see in many other languages um is there a reverse function um i believe there is a reverse function but i'm giving you very simple examples there are many more examples that we will go through today um so i believe we have a kahoot question or no okay we will start off by talking about list comprehensions and then after that we'll go ahead and start off with a couple kahoot questions so here's a concept called list comprehensions this is one way of being pythonic in your own code so list comprehensions are a classic pythonic tool it allows you to create new lists from other lists and it is basically reading like english so let me show you exactly what i mean by first demonstrating you know the functionality of what you would get out of a list comprehension without a list comprehension so here is what would it look like if we wanted to square every element in a list without having list comprehensions which i haven't showed you yet but just keep this idea in mind first i want to show you what it would look like to square every element in a list and store it in a new list so first i would have this list of numbers so 3 4 6 12 16 and 25 and if i wanted to store all of the squares into this new list i would loop through all of the numbers in my numbers list and i would append the square of them in the squares list and i would print out squares at the end so you know this is without a list comprehension 

[TEXT]
this is a very non-pythonic way of doing this this is something that you could basically write in any programming language however let's make this pythonic so how can we do the same thing that we did in that code example that i have down here but in a pythonic way uh someone's asking what is append this is something that was covered in the first lecture append is how you add something to the end of a list um so here is our example of list comprehensions up here so let's say i have this list the same list that we saw in the example down here and i want to have the same kind of behavior but i want to be more pythonic more readable what we can do is this idea of list comprehensions and so here how this reads is we will be outputting the square for every single number in the numbers array and so what squares will print out here i could run it if you would like it will print out the squares of all of those numbers so let me see if i can actually get this code snippet running for you let's see so if i just execute this you will see that we have all of the squares of the numbers that we have here in this new list that we generated using this list comprehension so let's go ahead and get back into the slideshow so how can you actually write a list comprehension yourself here is the general structure of a list comprehension demonstrated very nicely down here so first things first you want to have your output expression so in this case we want to square the numbers in the list so our output what will be going into the new list is this right here the number squared then we will have our um in this case like a for loop so we all know how to do a for loop you know 4e in our list or whatever thing that you can iterate over so that's this right here and at the end here we have an optional predicate or an optional conditional which we will talk about in a little bit but this part is optional and so that's why you don't see it in this list comprehension example and so this is a very nice way of being pythonic to generate lists in python let's see some more examples so here is how we can supercharge our list comprehensions using conditional logic so let's say i want to output all of the vowels in order in this list i can go ahead and say this is our output the vowel and so i want to loop through the sentence so for vowel in sentence if the vowel is in this string so if i find a character in this string that is also in this string right here then we can go ahead and add them to our output list which will be the vowels array or sorry list someone is asking do the outputs for list comprehension have to be stored in a list as far as i know yes they they are list comprehensions uh so let me go ahead and show you guys what this code outputs um in a compiler so that way you can get a better idea so here we have all of the vowels that we saw 

[TEXT]
so if you're you know generating a new list based on the string right here we would see that e is a vowel o is a vowel e is a vowel a is a vowel and so on and so forth and put this in the output list so we can go and show off another list comprehension here following the general structure someone asked why don't you need the um star star 2 for this one well the star star i'm not sure if rohan would cover this in the first lecture but the star star is how you square something in python so if i wanted to for example subtract 2 from every element in this list i would just simply say n minus 2 here the star star is not specific to list comprehensions it is specific to how you square things in python so this is our output expression that's all it is and so i hope this example in particular demonstrates how nicely readable these list comprehensions are this essentially reads just like english so let's go ahead and go through another example so we can have multiple loops as well so let's say i want to find the common numbers between list a and list b let's say i want to find the numbers that both of these share so i can just go ahead and say let's have two loops let's loop through all the numbers in list a and while i'm doing that let's go through all the numbers in list b and if the number in list a is equal to the number in list b then let's put that in our output expression which will go into our output list our common num and so we'll see that all of the output numbers uh all the common numbers that they share will go into the output list so these are 2 3 and 4 because they appear they occur in both lists so i hope all these examples kind of give you an idea of how to put this structure into action someone asked in the discord chat is there any syntax for list comprehension yes just follow this general structure down here you want to have your output expression just like we have here you want to have your loop or multiple loops and then you can have your optional predicate just like you see up here following this general structure it can help you write list comprehensions yourself so someone said on the twitch chat i feel like this can get very convoluted really quickly if you have like five loops going on this is completely correct and this is actually something that i was going to talk about but i might as well talk about it now so as you can tell i mean this as is is approaching convoluted so the whole point of using list comprehensions is to be elegant and to be readable in a way that sounds like english but the moment that you guys get a little bit carried away with these list comprehensions try to not do that 

[TEXT]
if there's something that's better off written not as a list comprehension uh you know in this way just stray away from it because you want to write readable code but you don't want to write convoluted code just for the sake of using these features but you know for example something like this i mean this is a very elegant way of doing it and this is how you want to how you would want to write um you know squaring every element in a list in python same thing here this is totally fine and i would say this is totally fine as well but have a limit to how convoluted that you get don't go too far otherwise you know these list comprehensions can get very complex um so let's go and have a couple kahoot questions i'll show you guys the code right here and give you guys a couple minutes to join in and feel free to ask any questions in the meantime [Music] so [Music] someone asked me how am i celebrating today i'm celebrating by giving and preparing this lecture for you guys you accidentally capitalized the first letter of your netid is that okay you know i'm actually not sure if that's okay i think it's okay um i i'm pretty sure the way that we process the data we make sure that casing is fine [Music] so are there points for attendance yes uh this is your points for attendance i have a kahoot joining the kahoot [Music] um i am hella sleepy it's like 5 a.m can i dip yes you can dip uh this is something we talked about in the first lecture we have we have the recordings of these up right after the lecture and to get credit you just do the questions on prairie learn and you will get your attendance credit uh can you check your overall grade yet we are working on putting up a grade book but for the most part i mean all the grades are up on prairieland for the homework assignments so uh someone said the prairieland attendance didn't come for the last time i believe it did but you might have missed the deadline because we only have the prairieland attendances up until the next lecture so it comes out pretty quick and then it expires like for in this case like 30 minutes ago [Music] uh so i believe it was there you should have seen it uh we just don't want to give you guys too much time on those because then you'll fall behind in lectures okay i'm gonna go and get the kahoot started we have two questions um so to start how can we check if an element exists in a list named names pythonically this should be very self-explanatory the coot today should be very easy just to make sure that you guys are following along if we do the kahoot do we need to do the attendance questions on prairie learn this is like the age-old question in this course that we've been asked i think maybe like 70 times now it's on the syllabus and we've said it so many times if you did the kahoot you don't need to do the attendance questions on prairie learn the attendance questions on prairie learn are for the people that don't watch it live there you go that's the answer if i have to answer it again i'm gonna cry uh [Music] happy birthday 

[TEXT]
thank you guys thank you guys okay well done to the 87 of you uh so it seems like we have some people confused about this other trick question uh while python does read like english it's not this much like english there is no such thing as is in its only if elements in the iterable such as a list so well done let's do one more question uh so what is the list comprehension for multiplying all elements in a list called nums by two so uh this is going to be similar to what i showed you guys on the slides uh someone said is in is a valid thing in python no is is a valid keyword and in is a valid keyword but is in together like to accomplish what we had in that last question is not a thing um is is a thing in is a thing but is in is not a thing okay uh well done to the 83 of you so we have some confusion with blue and yellow so for blue uh this would be correct if it was not in the wrong structure so if you guys remember uh this is the general structure where you want your output expression to the to the furthest to the left so here our output expression is all the way on the right this is not okay this is not how it how list comprehensions will work down here no one chose that thank god but down here a little bit confusing with the star star so the star star is what i showed you guys on the slides that was to square a number but this question was asking for multiplying which is just nums times two okay doesn't look like we have any more questions people are talking about how is in is valid in pandas we're just talking about native python here guys native python keywords so we can talk about more libraries later on um so let's continue so another pythonic tool which is enumerate and so what enumerate allows us to do is basically sometimes we want to assign an index to values in a list and so this is what enumerate allows us to do so let's say we have a list that has let's say values such as cars we have kia audi and bmw so let's say you know i want to have access to the indices and i want to assign every single one of these values and index we can use enumerate and so what this looks like would be you know 0 0 kia one audi and two bmw so 

[TEXT]
let's go and take a look at this so a common use case for this is in the context of for loops so rather than you know what we showed off earlier with indexed for loops by saying for i in range of a list you can actually um in this case say for i comma the value in enumerate and then the list that you're trying to iterate over so here what this will give us is for each value in this list we will assign it an index we will assign it a value so if we were to print out this statement right here we would get zero pizza one kimchi to ramen etc is enumerate a function yes it is and that's actually something that we will talk about in this next slide um yes so no more questions about that so yes so enumerate is very useful with loops but it doesn't always have to be in the context of a loop so here if i just wanted to you know pair an index with every value of a list this is pythonic because if you would imagine doing it not pythonically you would have like a for loop where you loop through all the values and have like an index counter and just basically pair them together that way but in python enumerate does this for you and so if you don't want to do it in the context of a list in a context in the context of a loop you can actually just use it just like this enumerate foods enumerate returns what is called an enumerate object so if you want to display it nicely you would just want to wrap it in a list just like this a list type cast it to a list and you would get an output just like this so i can show you guys what this looks like in the compiler uh so first if i just comments out this thing on the bottom here and just execute this so as you can see um we can just have 4i comma food and enumerate foods so i will pair with the the left side of enumerate which is the index and food will pair with the right side of enumerate which is the food and so when we're printing it we can just say print i comma food and we'll get something just like this and so someone asks a question about this one down here this is showing off how enumerate doesn't always have to be in a loop we can use it just as a [Music] as a function and so you'll see the output right here so people are asking are those tuples in a list yes these right here with the parentheses are the tuple data structure and we have tuples in our homework so the parentheses are the tuple data structure i don't believe we've actually covered it but tuples are very similar to lists except they are not mutable and uh other than that i mean they use parentheses instead of brackets and those are the main distinctions between the two and so enumerate returns tuples uh and so when we cast them into a list we'll get a a list of them so that is what enumerate is i hope that makes sense 

[TEXT]
doesn't look like we have too many questions about it uh someone asked if you pre if you typed print enumerate would that work no it wouldn't it would give us um my parentheses are off here yeah let's do this yeah so just give us this enumerate object at this memory address that's why you want to cast it to a list technically it compiles and everything but uh this is not really useful to print out and someone asked do you need to use enumerate as a looped to work no um that that's what this is showing off right here okay why are the parentheses in the output when you loop is because those are tuples which i don't think we had time to cover up in the first lecture but as i said tuples are just basically like lists except they are not mutable and they use parentheses instead of brackets so those are the main distinctions enumerate uses tuples and i believe you will have some practice with tuples on the homework that we have released so that is enumerate people are asking uh won't lists already have indexes yes lists will have indexes but or indices but this is how you would do it pythonically with the enumerate function and you can pair them together very nicely at the same exact time so i hope that clears up the questions about enumerate um so that wraps up a lot of the part of the lecture that we're talking about pythonic tools so there are many ways to be pythonic like i said earlier with more experience in the language you will get better writing this elegant pythonic code but until then just try to sway away from writing java code and python try to use the features that python provides and if you don't know what those features are just kind of have the intuition the you know push to when there's something that seems like there would be something for that in python just look it up say you know how do i reverse a list in python pythonically and you will find the answer to your question and over time you will get something you will get a better intuition for writing pythonic code so now that we are done covering kind of what pythonic code is and how to write pythonic code let's learn some data structures but first we have a couple questions about the the enumerate someone asked why did the for loop print out a tuple and not the items in a tuple that's because the tuple kind of pairs together as those pairs together the index with the value rather than just print out the value itself so if you have a list of values enumerate will for each value pair it with an index basically and they're stored in those tuples for every single value okay and someone asked what objects are valid in print object a very large amount of them i can't tell you all of them but most of the time the print function in python is very nice and will be able to print out what you would like without having to do much casting 

[TEXT]
so let's talk about our first data structure so i say data structure because many of you if you're especially if you're new to programming you only know the array data structure and now we've showed you the list data structure which is very commonly used in python uh we will show you some new data structures the first one being the set and so what a set is is it it is an unordered and unindexed data structure meaning that they don't have indices and they don't maintain the order of the things that you add to it and each value is unique so you won't have any duplicates when you store things in a set so another feature is that it is very fast when you use it as a lookup table this is something that we will talk about very briefly after some code examples however it does require some knowledge of things that aren't exactly taught yet you will learn it later in 125 and definitely in cs225 and also these sets have functions in what you would see in like a math set so you would have things like union intersection etc so let's go through an example of a set in python and we'll run through how to you know interact with a set while we do it so first things first the way that you initialize an empty set is with this right here you just say your variable is equal to set parentheses and so it's the same thing that you would have with like a list but in this case you have a set and so the way that you add values to a set is you just do dot add with the value that you would like to add very self-explanatory but like we said earlier sets do not have duplicates so here i've added one three four and five into the set but if i want to add three again into the set we won't have that in our output twice we will only have it once so let me go ahead and show you guys what that would look like right now so if i execute this and i print out what i've added into the list you'll see that three only shows up once because sets do not have duplicates we can also cast to sets so if i have a list here with duplicates i can cast it to a set and you will see that all of the duplicates are removed and it is now a set rather than a list um we mentioned that and the way that you cast it of course is by wrapping it with the type that you would like so in this case it's a set uh we said that these sets are not ordered and they are not indexed so the way that you would have to get values from the set if you wanted to is just by these normal for each loops so if i wanted to print out all of the numbers in this set i would just say four number in numset 

[TEXT]
and here you will see that we have one three four and five um that is the original set of course and so uh another way to access elements is by saying uh if elements in the data structure just like we did with lists so if i want to check if four is in the set we can just say if for in numset and we will see that here 4 is indeed inside of the set because we've initialized it with that value or rather up here and another thing to mention is that lookups into sets so checking if something is in a set is much faster than lists and we will talk about why a little bit right after this and so also we have these math functions that i told you about so sets and math you can do like unions you can do intersections you can do uh you know many other things so in this case if i want to find like the union between odd and even we'll see that we can union these two sets together and we'll have you know the elements from both sets if i want to have prime intersect to the odd set i can just do primes dot intersection with odds and that'll give us that intersection and same thing with the prime and the evens so those are the basic functions that you'll see in a set and how to interact with one so let me go ahead and show you guys a common example actually first let me tell you guys why lookup times are faster in sets than arrays and lists so this is something you'll learn about more later on in 125 and for sure in cs225 but basically if you want to look at if something is in a list whether you're doing it or not under the hood what it is doing is looping through the list and saying is this element inside of this list so you look at every single element until you've found the element that you're looking for in data structures and lists that are very large that actually takes time like going through every single element so if there's something you know all the way in the middle of a list that is like 3 million elements large that takes quite a bit of time quite a bit of computational time so with sets i don't want to explain exactly why because that'll take too long and that is beyond the scope of this lecture but you don't have to do that it is just constant time you want to find something it'll tell you right away without having to do any iterating through the data structure so it's much faster in terms of lookups and so with that said let me show you guys a common use case of sets as a result of that functionality the being able to find things very fast uh inside of a inside of a data structure without having to actually loop through every single time whether you're doing it or whether it's happening under the hood so let's say i have a player 

[TEXT]
a list of players strings nba players and let's say i want to welcome them but if i've already seen them if i've already welcomed them i want to just say hello again and so sets are very useful in this kind of algorithm you might use this algorithm in a you know coding interview type question if you want to keep track of things that you've seen already the set data structure is very useful so let's say i want to iterate through the players list and say if i've already seen the player so if player in scene then just say hello again to the player however if i haven't seen them add them to the scene list because now i've seen them and then say hello or rather welcome to the player and so if i execute this you can see what it looks like you'll see that for the second time that i find someone i will say hello again and this is very nice because if we actually stored what we've seen in a list it would take much longer than it would uh with a set because of the things that you'll learn later on in 225 that i don't want to cover but just keep in mind the iterating thing that i told you about so that is a common use case of sets let's go ahead and go through a couple quick kahoot questions we are running low on time but i should we should be able to get through everything so the question true or false sets hold duplicate elements it should be very self-explanatory and for the sake of time i will be cutting it off at 20 seconds someone said sets are just hash sets yes if you know what a hash set is um if not you'll learn it eventually set is basically a dictionary yes we will learn what dictionaries are right after this okay i'm going to go ahead and cut this off for the sake of time so sets hold duplicate elements this is false sets do not hold duplicate elements they only hold unique values uh next question we can access elements in sets by index true or false [Music] uh people are are saying that they disconnected from the kahoot that's fine as long as you answered some questions you should be good in terms of attendance just still follow along uh we might go a little over but not by too much i will try my best to keep this within 15 minutes okay i'm gonna actually just cut this off here most people have answered so for we cannot access elements and sets by index because they are unindexed sets elements and sets do not have indices so you cannot do that if you want to access elements inside of them you can either see if that element is in by saying the in keyword or you can loop through the values but you cannot access by index so next the dictionary so dictionaries are another data structure and so in lists we access elements by referencing indices but with dictionaries rather than referencing indices we reference keys they are key value pairs and i'll show you exactly what i mean by that in an example 

[TEXT]
and they have the same exact qualities as a set in terms of fast lookup times so if you want to look up if a key is inside of a table it is very fast just like the set compared to a list so let's look at a quick example and i'll show you guys a common use case of dictionaries as well so this is the syntax for initializing a dictionary so here we have our key which is brand model and year and then our values which is going to be ford mustang and the number you can have mixed types in terms of what the values are storing and to initialize one you would use these curly braces with these colons separating the key and the value and so how you access values is first you can have either the square brackets there are two ways to access values so if i want to access brand i would just you know say card [ __ ] with the square brackets and then the name of the key because we access things in dictionaries by accessing them by key rather than index which is what you'd see in a list and so we can also do dot get with the same exact thing we can say dot get with the key name and so the difference between these two dot get and the square brackets is that if you reference an element that doesn't exist in the dictionary if you reference a key that doesn't exist dot get will return none while the square braces will return a key error and i'll show you exactly what i mean here so here ignore everything down on the bottom here i want you to direct your attention to none up here is me accessing the elements none is what happens when we do get but if i uncomment this and i access with the square brackets we will raise a key error so that is the difference between the two uh use whatever one makes sense at the time sometimes you do want that error and sometimes you want none so if you want to change values you can access them just like we did when we printed them out and just update them so let's say i want to update the values of the brand model and your keyword we can just update them like so and print it out if we would like so i can show you guys what that looks like so um you can see here that if i want to add something to the list just give it a key that it hasn't seen so in the original dictionary mechanics was not a key but if i want to add a value to it we can just refer to mechanics and then a list for example here of all of the mechanics that my car has seen and when we print that out you'll see here that we have the updated list so this is how we add values and this is how we change values if we want to loop through the keys we can just say four key in the dictionary that'll give us the key it doesn't matter what the name of the variable here is i just named it key for clarity if you want to loop through the values we just run dot values on the name of the dictionary and that'll give us all of the values 

[TEXT]
so here you see all of the keys mechanics brand model and year down here you'll see all of the values that we've added to it which is the list of mechanics the model and the brand and the year if we want to loop through both we can just do dot items which will give us both the key and the value at the same exact time inside of those tuples that you saw with the enumerate so we went over that very quickly but i want to go over an example of how you can how you can use these uh dictionaries right after a quick kahoot question we will wrap up very soon sorry for going a bit over this is the final kahoot question so how can i get the value of the marks key in this dictionary that i have for you i went over this very quickly but this should be fairly self-explanatory as long as you are following along and i will also cut this off pretty quickly just like the other two so get your answers in as soon as you can we have one more example to go through and then we'll be done for the day you can select multiple uh answers here [Music] [Music] i'm evil i'm sorry i don't know like i'm the worst i don't know i'm sorry there's multiple answers to this question the cat's out of the bag [Music] um all right so well done to blue and yellow these are both valid ways of accessing the marks key uh two is wrong because as we said dictionaries don't have indices like like what you see in lists they have keys you access by key not by index and so here we said dot get and square brackets are both completely fine except square brackets if you access an element that is not in the dictionary a key that doesn't exist it will raise a key error while dot git will give you the value none so that is it for the kahoot and we will have one more example of dictionaries so this is a common use case for dictionaries uh sometimes you want to be able to store information that will be useful in an algorithm for you so let's say i want to store all of the character counts inside of this string the counts of every single character that you see so what i can do is create a dictionary called character counts and i want my key to be characters and then the value being all of the times that i've seen that character in the string and so what we can do is just loop through all of the characters in example and say that if we've seen character in character counts then increment the value by one because we have uh you know another occurrence of that character and if we haven't seen that then initialize the value to zero and so if i print this out we'll see that after looping through the string it'll give us some very useful information for every single character that we've seen if we've if we or actually apologies this should be one because we've seen it uh let me fix that real quick okay so we've seen e only one time so it'll increment it by one uh but for the ones that we've seen more than once like e it'll say eight times 

[TEXT]
it'll store all the character counts from character to integer and so if i want to let's say use this information in a later algorithm let's say i have a question that says find me all of the characters that have occurred at least four times in this in this string we can go ahead and declare that same kind of character counts dictionary loop through the string in the same fashion that we had before and we can say for every character in the example which is the string we can go ahead and increment it in the same fashion that we did before and while we're at it if we hit a point where after we increment a character count and it reaches four we've seen four instances of the character in that string we can append that character to the output list and i will print out what that will give us so in this example string that i wrote the characters that have occurred at least four times are e n o and t uh and also i still have that mistake that i need to solve so uh there you go these are this is the correct answer for that so uh hash tables or rather dictionaries in this case dictionaries are very useful for storing information in algorithms and they're very useful for storing data that won't exactly be structured as nicely inside of a list so that is a common use case we will give you guys some practice with that in homework so that is the end of this lecture sorry for going five minutes over it seems so from here on out we will be using python as a tool and so um what i mean by this is we are not going to spend a whole bunch of time with more python syntax lectures for all of our future lectures from here except for the rust lectures near the end of the semester or in the second half of the semester we are going to be using python as a tool and so what that means is we're not going to spend a whole bunch of time on syntax because syntax is boring and from here on out you should be able to for you know things that you might not know kind of fill in the gaps yourself but we have covered quite a bit of python this should be a very nice starting point very nice foundation for you and we will give you some examples and practice in the homework so any questions that you guys might have drop them in the chat but from here you guys are free to go apologies for going over people are asking about extra credit no extra credit was very easy and also i'm not sure if we will actually be offering extra credit

[SUMM]
The objectives for today are to understand the review, Pythonic code, list comprehension, enumerate, sets, and dictionaries. The review covers variables, conditionals, loops, functions, and lists. Pythonic code is code that uses Python in the way it was intended to be used. Common commands and code in other languages can be condensed and made more effective in Python. Pythonic code can be used to find if something exists in an array, to find the sum of a list of numbers, etc. more effectively. Also, slicing is a useful piece of Pythonic code. List comprehensions are a classic Pythonic tool which allows you to create new lists from other lists. List comprehensions have an output expression, variable, input sequence, and an optional predicate. We can supercharge list comprehension with conditional logic. Another Pythonic tool is called enumerate which allows us to assign an index to values in a list. Enumerate is useful with loops. Now we will learn about data structures. Sets are unordered and unindexed data structures, with each value being unique. Sets are very fast when used as lookup tables. Sets have a function in ÔMathÕ sets. To initialize a set, you say your variable is equal to set(). You use the .add() with the value you want to add. Sets have faster lookup times than arrays or lists. Dictionaries are another data structure. We can access elements by referencing keys. They use key-value pairs. These are very fast when used as a lookup table. 
[SEP]

[TEXT]
what's up a push people today we're taking a look at Native American life pre-contact and early colonization no matter which a push book you are using this video is going to help you out for the AP exam and keep in mind over ten thousand years before Columbus quote-unquote discovered America people came to the Americas via the Bering Strait and these individuals we are going to know as Native Americans Native Americans developed a wide variety of social political and economic structures based upon interactions with each other very often they were involved with trade with nearby tribes and their interactions with the environment although Native American culture was very diverse many Native American religions were very often connected to the relationship with nature and this idea was known as animism the belief that non-human things plants and animals possess a spiritual essence so Native American religious was going to be very different than the Europeans that were going to come over to conquer in fact the diversity of Native American culture is an important point to keep in mind as Native Americans develop different and complex societies that both transformed and adapt it to their diverse environment and as you can see in these two graphics the different Native American economic activity as well as environmental regions some examples to kind of keep in mind you could see the Southwest Native American culture seen in the example of the Pueblo Indians they lived in arid land it was very dry and they relied on irrigation to grow maize or corn and other agricultural products in fact maize cultivation spread from present-day Mexico and headed north and allowed for a large population growth in the American Southwest you also have the Great Basin and Great Plains region circled in the blue and you could see this in the lifestyle of the Lakota Sioux Native American tribes there was a lack of natural resources in this region which led to the growth of a nomadic life Native Americans in this region very often moved around searching for Buffalo or the bison and then of course you have the Atlantic coast and the Northeast Native American cultures represented with the Eric white tribe in this region you see a mix of agricultural and a hunter-gatherer society there is going to be the establishment of permanent villages in many of these areas and you could see the influence of Native American tribes such as the Iroquois Confederation in the relationship with the French the English and the Dutch in the years to come so why do these Europeans come to this suppose a new world well you could break it down into the 3 G's gold glory and God many countries such as Spain and others we're looking for new sources of wealth new trade routes to places such as Asia but you also have glory wanting to increase the power and the status of not just individuals but also of countries and of course God there was a desire amongst many individuals and countries to convert the native population to Christianity and you need to understand the religious motives of colonization make sure you know about 1492 and how it is a big turning point in history with the arrival of Columbus under the Spanish flag and other Europeans that follow this leads to a massive demographic and social changes on both sides of the Atlantic both the Western Hemisphere and Europe and Africa are never going to be the same again 

[TEXT]
in fact the arrival of Columbus sets off something known as the Columbian Exchange and you could see it in this graphic right there it is the transatlantic exchange of not only people but diseases food trade ideas between the Western Hemisphere Africa and Europe some examples to keep in mind our horses brought over from Europe by the Spaniards these are going to dramatically change life for Native Americans especially on the great plains it's going to make people more mobile than ever before it's going to lead to new contact with new tribes and a whole host of other consequences diseases such as smallpox brought over from Europe are going to lead to a massive population decline as deadly epidemic spread the lack of immunity to these diseases is going to lead to an up to 90% death rate amongst Native American people in some areas and food is also going to play a big role here maize or corn from the Americas is going to be brought over to Europe for the first time and this is going to fuel a huge population increase in parts of Europe it's important to note the first countries to colonize the Western Hemisphere are going to be Spain and Portugal they are going to divide up the new world with the help of the Pope with the treaty of tordesillas Spain and Portugal agreed to divide up the Western Hemisphere everything on the west of that line will be Spain's and everything to the east will be Portugal's Spain's the first to colonize what will become the United States in fact they establish the colony the first permanent settlement in North America at st. Augustine and 1565 what will become Florida and much of the Spanish Empire you're going to see the introduction of the in comiendo system where Spanish colonists receive land with native people and basically this is going to be a form of native slave labor whether it be in mining looking for resources such as silver or agriculture and especially in the Caribbean for sugar the encomienda system is going to be a very profitable yet harsh economic system in the Spanish Empire another part of the system was the Spanish sought to convert native people to Catholicism and this was a huge part of Spanish colonization and this would be very different than what the British will do and throughout the Spanish Empire you are going to see the emergence of racially mixed populations of European native and African descent you're going to get the rise of mestizos people of mixed Indian and European heritage and the rise of mulatos people have mixed white and black ancestry another important point to note is attempts to change Native American beliefs led to resistance and conflict and on this map you could see later on the missions that are going to be established throughout the coast of California but also in places such as present New Mexico Native Americans are going to resist this colonization and in what is today New Mexico a Native American leader by the name of Pope a is going to lead a revolt known as the Pueblo Revolt in 1680 this revolt leads to the death of hundreds of Spanish colonists and the destruction of Catholic churches in the area as Native Americans are rejecting this colonization this colonization was very often brought on by a belief in white superiority in order to justify their subjugation of Native Americans but under Pope Hays revolt or the Pueblo Revolt this forces the Spanish out temporarily 

[TEXT]
and this revolt really shows that native peoples strove to maintain their political and cultural autonomy and when the Spanish eventually returned to the region there are force to accommodate some aspects of native culture they don't come back to the region until 1692 they are forced to allow Native Americans to continue some of their cultural practices debates occurred over how Native Americans should be treated and how civilized they were compared to European standards and these debates actually occurred amongst the Spanish themselves you have one day Sepulveda who wrote just causes for war against the Indians and in his writing he justified Spanish colonization of the Americas he said that this was a good thing and obviously if you're a Native American you're not feeling these ideas another Spaniard in 1552 de la Casas wrote a short account of the destruction of the Indies and he criticized the Spanish treatment of the indigenous people and condemned some of the things done in the name of Spanish colonization although Spain and Portugal are the first ones to arrive other European countries are going to arrive and the one we're really going to get into in video 2 is Protestant England will soon challenge Spanish colonization of North America you can see on the map a variety of European powers are going to colonize present-day North America however unlike the English colonists the Spanish the French and Dutch are going to attempt to exploit new world resources and for more complex relationships with indigenous people so although Spain and Portugal were the first to form colonies that use Native American and later on African slave labor in areas such as agricultural and mining it's important to note that France Holland or the Dutch Spain will trade and intermarry with Native Americans whereas England will not be interested in these much more complex relationships finally all European countries are going to be seeking to colonize the new world because of these ideas known as mercantilism and mercantilism is an economic theory that states colonies exist to enrich the mother country to send that money over to the mama and so this could be in the form of access to cheap raw materials such as sugar or tobacco and also to provide gold and silver so whether or not we're talking about Spanish French or English colonization it's important to know mercantilism is driving them to expand that's going to do it for this video if the video helped you out make sure you click like tell all your friends about jos productions and if you haven't already done so subscribe to the channel if you have any questions or comments put them below and have a beautiful day peace

[SUMM]
People came to the Americas via the Bering Strait ice bridge. Native American societal structure is built upon interactions with each other and the environment. Natives practiced animism, which is the belief that non-human things possess a spiritual essence. Natives developed societies that transformed and adapted to their diverse environments. Some examples include the Pueblo, Lakota Sioux, and Iroquois. The colonization of the New World centered around the 3 Gs: gold, glory, and god. The arrival of Columbus led to massive demographic and social changes. The Columbian exchange caused the trans-atlantic exchange of people, diseases, food, trade, ideas, etc between the Western Hemisphere, Africa, and Europe. Horses, disease, and corn were all exchanged. The Treaty of Tordesillas made Spain and Portugal divide up the Western Hemisphere. The Encomienda System said Spanish colonists received land with native people. They used native slave labor in mining or agriculture. Spanish people sought to convert Native people to Catholicism. Mestizos are people of mixed Indian and European heritage. Mulattos are people of mixed white and black ancestry. PopeÕs Rebellion in 1680 led to the death of hundreds of Spanish colonists and the destruction of Catholic churches in the area. Debates occurred over how Native Americans should be treated. Juan de Sepulvida wrote ÒJust Causes for War Against the IndiansÓ that justified Spanish colonization of the Americas. Bartolome de las Casas published in 1552 ÒA Short Account of the Destruction of the IndiesÓ that criticized Spanish treatment of indigenous people. Protestant England will soon challenge Spanish colonization of North America. The Spanish, French, and Dutch are going to attempt to exploit new world resources AND form more complex relationships with indigenous people. A reason for colonization is mercantilism, which is when colonies exist to enrich the Mother country. These countries have access to raw materials and provide gold and silver. 
[SEP]

[TEXT]
welcome to another dose productions video today we're taking a look at the southern colonies roughly from 1588 to 1733 and as always no matter which apush book you are using this video is going to help you with all the important content so it's important to keep in mind that England is a little bit slow to the colonization game it wasn't until after England defeats the Spanish Armada in 1588 that England is really in a position of being powerful enough to challenge the other countries especially Spain and to begin the process of planting colonies English colonization is going to be different for a variety of reasons but one important one to keep in mind is that England was a Protestant country we learned about in world history the Protestant Reformation and England was a Protestant country whereas Spain was largely Catholic it's important to note the different types of colonies how they're going to be paid for and how they are run for example you have joint stock companies where stockholders invest in a company such as the Virginia Company of London and they share in the potential profits or losses from the colony this can also be referred to as a corporate colony another type of colony you're going to see as a proprietorship where a land is given by the king to an individual or to a group of individuals and then finally a royal colony it's paid for and ruled directly by the monarchy England's first attempt at colonization is not going to go well the Colony of Roanoke under Sir Walter Raleigh in 1587 and what is today North Carolina in fact Walter Raleigh goes back to Europe and when some individuals return in 1590 the colony is found to be deserted all of the men and women are gone England's first success in colonization of North America's is going to take place in the Chesapeake and make sure you know this geographic region the Chesapeake colonies are going to refer to Virginia and Maryland it's really in the upper south you can see right there in the Chesapeake Bay and the first permanent English colony in North America will be established at Jamestown in 1607 its motive was wealth the king King James the first gives a charter to the colonists and in 1607 they establish Jamestown it's set up under a joint-stock company the Virginia Company of London remember they're going to share in the profits as well as the losses one hundred male settlers arrived at Jamestown and they suffer a starving period these are men who are wealthy lured looking for gold like the Spanish had achieved they're not wanting to do all the hard labor many of the original settlers died of disease and starvation because the land was hot humid mosquito infested and the settlers were not prepared for this hard work luckily John Smith comes in and establishes military discipline and saves the colony he implements ax you don't work you don't eat policy and the colony starts to stabilize John Rolfe is going to give the colony something to make money on when he introduces the cultivation of tobacco in colonial Virginia so what's life like in colonial Virginia tobacco provided the colony with a cash crop and led to the rise of the plantation system 

[TEXT]
you have the rise of very large farms you can see tobacco right there in the image and with the cultivation of tobacco you need a cheap labor supply and early on in colonial Virginia James towns history it's going to be indentured servants they are going to serve as the early labor force of Virginia indentured servants basically serve for a period of time usually around four to seven years in exchange for passage to the colony they would work and at the end of their service in theory they would be granted their freedom and perhaps some land to encourage this the headright system was introduced where individuals would get land if you paid for somebody's journey to the colony and what this ends up doing is the rich end up getting richer the wealthy people are paying for indentured servants to come over and getting more and more and and the sad part is many indentured servants weren't out living the terms of their contract they would die as the colony develops they establish some government structures the House of Burgesses established in 1619 this is a form of early representative government in fact it's the first in what will be the future United States this elected representative government didn't happen in French or Spanish colonies so this is unique to the British colonies it starts a tradition of self-rule but the House of Burgess was largely made up of the wealthy planters problems are going to begin to develop in the colony tobacco destroyed the land it always kind of required more and more land to cultivate this crop and as the demand for land goes up so does the demand for labour and as this demand for land goes up people keep moving further and further into the interior into the frontier as you can see on the map along with the river at the James River tensions increase with the natives as colonists move west into Native American land and that's going to lead to two important developments one the relationship with Native Americans in the region and the development of slavery so first things first what was going on with the native people there was a very hostile relationship that developed between the colonists and the Powhatan tribe Powhatan was the chief in the area and all the different tribes of the Chesapeake region kind of were lumped together under Chief Powhatan as we already mentioned tensions increased as the settlers moved west you could see on the map that English settlements are very close to existing Native American settlements amongst the powhatan confederacy a series of wars are going to break out between the year 1610 to 1646 these are collectively known as the Anglo patan Wars the first one ends in 1614 with the marriage between Pocahontas and John Rolfe they look nothing like that at all peace is temporary with this first known interracial Union in Virginia this was very rare for the English and the natives to intermarry and another war will begin with the massacre of 1622 Powhatan's confederacy attacks in 1622 tired of the continual taking of their land and the decimation of their population by european diseases and with the massacre of 1622 over 300 colonists are killed which is about one third of the population the war goes on for a while and by 1624 the Jemez town becomes a royal colony 

[TEXT]
the Virginia Company of London was bankrupt the crown takes over colonial Virginia and by 1646 that pal Houghton Confederacy is largely defeated and there's a variety of reasons why they are defeated and it's largely due to disease which had destroyed the population disorganization keep in mind these tribes were different and so it was hard to put up a united front and they were disposable in the minds of the English they had no need for them so they're going to wipe them out it's important to note labor relations in colonial Virginia and the transition to slavery we've already seen in the early period the primary labor source was indentured servants but the problem was eventually these individuals were out living their contract and making demands on the colony the first Africans were brought into the colony in 1619 aboard a Dutch ship but in this early period indentured servants were the majority of the workers so how does this change take place well very important event to keep in mind is Bacon's Rebellion it takes place in 1676 mmmm bacon and it has nothing to do with the tasty food here is the background to it there was growing frustration with a lack of land in fact many of these indentured servants were beginning to outlive the end of their contract and they wanted land and governor Berkeley the governor of the colony did not allow land hungry settlers to move too far west you can see on the map why part of the reason is he wants to avoid clashes with Native Americans on the frontier there also was frustration with the lack of political power remember the House of Burgess was dominated by the plantation elite so many of these former indentured servants had no political or economic opportunities in the colony and finally they wanted the government in Jamestown the indentured servants and the free White's wanted the government in Jamestown to do something about Native American attacks on the frontier governor Berkeley was reluctant to do so because he was benefiting from a lucrative fur trade with Native Americans on the frontier and all of these tensions erupt into something called Bacon's Rebellion the leader of the rebellion is Nathaniel bacon he leads a group of rebellion against the Indians on the frontier where they start randomly indiscriminately killing Native Americans who had allegedly attacked the colonists and they also moved their frustrations to Jamestown where they burned down the capital this is a big crisis in the colony Nathaniel bacon I'd like to thank Ward this bacon covered suit but unfortunately for the rebels bacon suddenly dies of dysentery the rebellion collapses some of the rebels are hung and peace comes to the colony the impact of Bacon's Rebellion would be huge it would lead to a transition to African chattel slave labor in other words slavery based upon race where individuals would be considered property and the idea was you could not enslave the native people for a variety of reasons indentured servants were out living their contracts and demanding things they then switched to African slave labor 

[TEXT]
Bacon's Rebellion also reveals tensions in colonial society between the wealthy and the poor as well as regions those poor farmers out in the frontier in the back country versus the more wealthy Tidewater elite in the east another important colony in the Chesapeake that you should know about is Maryland it is north of Virginia you can see there right along the Chesapeake Bay Maryland is a proprietorship unlike Virginia which was a joint stock company the king gives land to Lord Baltimore otherwise known as George Calvert it's the first proprietor colony and much like Virginia tobacco plantations are going to be the thing in Maryland but unlike Virginia there was something unique because not only are they there to make money but they're also there for religious reasons an act of toleration is passed in 1649 this guarantees religious freedom for all Christians and it's intended specifically to protect Catholics Catholics were seeking a refuge from the hostility of England and Marylyn is going to be intended partially for that purpose it is important to note that this is one of the first laws granting religious freedom to all Christians in the English colonies but there are limits to it because it promised death to anyone who denied the divinity of Jesus so religious freedom did not extend to Jews Muslims and other religious groups who were not Christian finally the other colonies in the south south of the chesapeake region we have North Carolina South Carolina and good old Georgia South Carolina is going to be characterized by a cash crop economy really rice plantations are going to be hugely important here you're going to get the development of a very wealthy aristocratic elite huge plantations and very important African slave labour South Carolina is going to be characterized by very long growing seasons and so plantation economy is going to be very profitable in this region North Carolina is going to be very different than South Carolina it's going to be mainly small tobacco farmers very similar to Virginia but much more small farming centered and there's going to be less of a reliance on slavery than in South Carolina it's important you know that the British also had colonies in the Caribbean Barbados and Jamaica are two great examples and in the Caribbean they're going to have a very close relationship with South Carolina they both have these long growing seasons and they're both going to rely on cash crops and slave labor in the case of the Caribbean you're going to see sugarcane production being the major economic enterprise and they're going to have a very strict slave labor system to ensure this remains profitable and finally the last colony to be established will be Georgia in 1733 its intended to serve as a buffer colony against Spanish threats in Florida as well as French threats over there in Louisiana its original purpose was to serve as a penal colony for debtors to kind of bring them over to the new world to start over and originally it bans slavery and the sale of rum James Oglethorpe is one of its key figures early on in its period he successfully defends the colony against the Spanish 

[TEXT]
but the problem is nobody really comes because of all these restrictions and the Spanish and French threat so eventually they drop these restrictions and in 1752 it becomes a royal colony fully controlled by the British and it will become a plantation based slave economy much like South Carolina that's going to do it for the southern colonies if the video helped you out click like if you haven't done so subscribe to the channel make sure you tell all your friends about Joe's productions if you have any questions or comments you could put them in the comments section and until next time have a beautiful day peace

[SUMM]
England defeats the Spanish Armada in 1588. England was a Protestant country, and it had different types of colonies. A joint stock company is where stockholders invest in a company and share in the potential profits or losses from the colony. A proprietorship is land given by the king to an individual or group. A royal colony is paid for and ruled directly by the monarchy. The colony of Roanoke fails in 1587. The Chesapeake colonies were Virginia and Maryland. The first permanent English Colony in North America was established at Jamestown in 1607 for wealth under the joint stock company the Virginia Company. Many of the original settlers died of disease and starvation. John Smith established military discipline and saved the colony. John Rolfe introduced tobacco. In colonial Virginia, tobacco provided the colony with a cash crop and led to the rise of the plantation system. They needed a cheap labor supply, so indentured servants served as the early labor force of Virginia, meaning they worked for a period of time in exchange for passage to the colony. The headright system said that you get land if you paid for somebodyÕs journey to the colony. The House of Burgessess was established in 1619 and was a form of early representative government. Problems began to develop, as tobacco destroyed land, demand for labor and land goes up, tensions increase with natives as colonists move west. A very hostile relationship developed between the colonists and the Powhatan tribe. Tensions increased as settlers moved west. The Anglo-Powhatan Wars happened between 1610-1646. The first war ends in 1614 between Pocahontas and John Rolfe. The Massacre of 1622 begins the 2nd war. By 1624, Jamestown becomes a royal colony. The Powhatan Confederacy was largely defeated by 1646 because of disease, disorganization, and disposability. The first Africans arrive in the colony in 1619. BaconÕs Rebellion occurred in 1676. This was due to a lack of land, lack of political power, and a lack of action on Native American attacks. Nathaniel Bacon leads a rebellion against Indians on the frontier and burned Jamestown. This leads to a transition to African Chattel Slave Labor, which demonstrates tension in colonial society between social classes and regions. Another Chesapeake colony was Maryland which was a proprietorship led by Lord Baltimore. The Act of Toleration of 1649 guaranteed religious freedom for all Christians. There were multiple Southern colonies. South Carolina was a cash crop plantation economy with wealthy aristocratic elite and African slave labor. North Carolina had small tobacco farmers and less of a reliance on slavery. Georgia served as a buffer colony against Spanish and French threat.
[SEP]

[TEXT]
what's going down u.s. history people today in this video we're going to take a look at the New England colonies and the middle colonies no matter which book you're using for a push this video is going to help you out with all of the important stuff let's get started first important thing to keep in mind is where are these New England colonies and they're right here and as you can see there's a couple of things that characterize this region many of the people who are going to the New England colony are going for religious motives there's going to be much more of a mix of both male and female settlers many people are coming over as families and they're going to form tight-knit communities and they're going to have a mixed economy and make sure you know about the differences between the New England colonies and those in the Chesapeake region Virginia and Maryland the first of the New England colonies to be founded is the Plymouth Colony and really it's a result of religious conflict in Europe we call the Protestant Reformation spark dramatic changes in Europe and led to a rise of Puritanism and this happens in England as well and you get a group of people known as Puritans and their whole idea is they wanted to purify the church they were harassed by the monarchy over in England the King felt they were a threat many Puritans were arrested and they had these new ideas such as predestination that God already chose who was saved before even being born one group of Puritans the Pilgrims were much more radical hardcore these were separatists who wanted to break away from the Anglican Church they actually tried to get to Virginia but they get a little lost like most of the Europeans do coming over to the new world and they land over there in the Massachusetts Bay at what becomes known as Plymouth they're aboard the Mayflower you could see a replica right there over near Boston and before they even get to the colony they signed something called the Mayflower Compact and this was a agreement establishing a basic government based upon majority rule it established the basis for self-government and one of the key figures in the Plymouth Colony is going to be a guy by the name of William Bradford the colony is going to struggle in the beginning just like our friends over in Jamestown did but not as much the weather a little bit more favorable that's not as hot they don't have the mosquito problem and they're gonna get the help of a local Native American leader by the name of Squanto who's going to help this colony survive by teaching them how to farm and hunt and of course the famous story eventually they'll have the first Thanksgiving so the pilgrims are the first landing at Plymouth in 1620 but later on you get more Puritans coming over and they're going to establish the Massachusetts Bay Colony remember the Puritans want to reform the church they don't want to break away they get a charter from the king to establish the Massachusetts Bay Company and in 1629 a Puritan by the name of John Winthrop receives a Charter to establish that colony 

[SUMM]
they're going to land in 1630 and what is today Boston and the goal of Winthrop in his Puritan followers is to as he said establish and to be as a city upon a hill Winthrop and his followers believed that they had an agreement with God to build this holy Society that would serve as a model for the rest of the world and so they're coming over here with these religious goals and Winthrop is going to serve as their first governor religion is extremely important in the New England colonies in fact education was required they established Harvard University to Train Puritan ministers but important to note religious freedom was reserved only for Puritans church membership was a requirement for participation in politics in fact in all the New England towns you had not only schools but also the church and the town hall meeting the town hall meeting becomes an important part of direct democracy in colonial America and especially the New England colonies all church-going males could participate in this form of direct democracy and in the New England colonies we have a mixed economy of both agriculture and commerce the weather was much cooler up there so they're not going to rely on cash crops like we're going to see in the Chesapeake or the south now keep in mind that religious toleration was not something that was practiced in the New England colonies and people who express religious dissent were very often quickly dealt with one such individual is Roger William he questioned the Puritan leadership of the colony he questioned the leaders and the doctrine and he called for the complete separation of church and state and he also criticized the colony's treatment of Native Americans he felt the colonies should pay the natives for their land what a crazy idea and because of his questioning of the colony he is banished from the Massachusetts Bay Colony he's kicked out and he goes off to form his own colony known as Providence Rhode Island this is going to be a really important colony you could see that right there on the map because it's the first colony with complete religious freedom another individual you should know about is Anne Hutchinson she does something worse than Roger Williams she's a woman and she speaks out she challenged the accepted role of women within the church by openly speaking out against church leaders and just like Roger she is also kicked out of the Massachusetts Bay Colony make sure you know about the relationship between the colonists and Native Americans as the New England colonies grow you're going to see all the different ones which will eventually form there inevitably going to come into contact with native people there is a massacre that takes place in the 1630s called the qua war where the New England colonists nearly wipe out that the qua tribe and you could see in that illustration them attacking of the koala CH one of the things the colonists do is they form something called the New England Confederation in 1643 and this is a military alliance of all the New England colonies except Rhode Island and it's intended to defend the New England colonies against potential threats and the threats were many we got not only Native American threats but you have the presence of the Dutch a little bit further south and also the French out in the West England's in a civil war there's all sorts of problems in England 

[SUMM]
so the colonies are kind of left to fend for themselves and so the New England Confederation is an example of colonial unity having a common purpose which is the defence of the colonies a really important war you should know about is King Philip's War or meticles war Medicom was his Native American name Metacom was the leader of the Wampanoag tribe and he starts organizing a resistance and alliance of native bribes to try to remove the Puritan settlements from his territory this time unlike during the Pequot War King Philip or Metacom has weapons you could see that in the image they're armed they have these deadly guns so they could fight back and have a shot but unfortunately for King Philip he's eventually killed and the resistance is crushed significant about King Phillip's war it is the last of the major Native American resistance to the New England colonies and not only is it the increasing population of the colonies but diseases are causing cultural and demographic changes for the native people in the New England region moving out of the New England colonies make sure you know about the middle colonies and we really call these the breadbasket colonies because they're going to produce a lot of the food for the colonists the first one is actually inhabited by the Dutch and before it becomes New York it was originally a Dutch colony called New Amsterdam you could see there in the purple some of the territory Holland controlled and what their colony looked like unfortunately for the Dutch they did not have a firm grasp on their colony and Charles ii sends a military expedition and grants the area to his brother James the Duke of York the territory of New Amsterdam is going to become New York and it's going to remain a very religious and ethnically diverse colony another important colony is Pennsylvania founded in 1681 by William Penn as a refuge for Quakers he wanted to create a holy experiment the group Quakers was actually known as the religious Society of Friends Quakers was their nickname their passivist they were treated very poorly in England and so William Penn wants to establish this colony and the crown grants him a block of land this is a proprietorship Penn great say very liberal colony there is representative assembly people are voting for representation he seeks to treat the Native Americans very fairly by buying land from them rather than just taking it there is widespread religious toleration and freedom in Pennsylvania and certain rights are extended to women as well they have a right to be active in the church and to even be preachers things that did not happen in the New England colonies some key things about the middle colonies to keep in mind is they are going to be demographically religiously and ethnically diverse so you've got a mix of people in this area whether it be the Dutch the Quakers Protestants Puritans and so on and their economics are like I said breadbasket they're going to be producing food especially wheat in corn but they're also going to be involved in trade and other things now that we've broken down all the different regions of the colonies make sure you understand some colonial policy remember the colonies are there because of this economic theory known as mercantilism 

[SUMM]
the colonies exist to enrich the mother country in this case England however in this early period you have this thing called solitary neglect England was involved in its own internal conflicts such as the English Civil War and so they're going to be largely indifferent to the colonies they're going to kind of be letting them do their own thing for a big chunk of this time there are some exceptions though we have some policies that are put in place some mercantile laws such as the Navigation Acts and this is really England trying to keep watch over its colonies the navigation acts did things like one trade must be carried only in English or colonial ships to trade how to pass through English ports before it can move on to other places such as France and three certain enumerated goods certain Goods that are spelled out from the colonies could be exported only to England and it starts off with tobacco but other goods are only allowed to be trade with England there is very loose enforcement in the beginning in fact smuggling was a major problem the colonists were very often trading with the French and the Dutch and others but later on the English are going to try to deal with that problem stay tuned there are going to be instances where England's going to try to clamp down on the colonies you could see that whole region in the green is going to be something called the dominion of New England in 1686 this is implemented by England to increase royal control over the colonies and the king sends over an individual by the name of Sir Edmund Andros to regulate and keep these colonies in check and he does a couple of things most of which are very unpopular such as enforcing the Navigation Acts which the colonies were largely ignoring limiting the town hall meetings and other things and it's important to note the goals and interest of European leaders in England for example very often at times diverge from those of the colonists and this led to mistrust on both sides of the Atlantic this dominion of New England will eventually end with the Glorious Revolution and 1688 which we'll take a look at next time and until next time I hope you learned a whole bunch of stuff and if you did click like on the video tell your friends about Joe's productions subscribe to the channel you have any questions or comments post them in the comment section have a beautiful day peace

[SUMM]
New England colonies had religious motives for colonization, male and female settlers, tight knit communities, and a mixed economy. The Protestant Reformation sparked dramatic changes in Europe and led to the ride of Puritanism. Puritans wanted to purify the church. The pilgrims were separatists who wanted to break away from the Anglican Church. The pilgrims sought to establish a colony and land at Plymouth. The Mayflower Compact established a basic government upon majority rule, and it established the basis of self government. The Governor was William Bradford. In 1629, Puritan John Winthrop received a charter to establish the Massachusetts Bay colony. His goal was to be a ÒCity Upon a HillÓ. Religion was extremely important in the New England colonies. Religious freedom was reserved only for Puritans. Church membership was a requirement for participation in politics, Town Hall Meeting became an important part of direct democracy in colonial America, as all church going males could participate. Roger Williams questioned Puritan leadership. He called for the complete separation of church and state and criticized the colonies treatment of Native Americans. He was banished from the colony and founded Providence, Rhode Island. This was the first colony with complete religious freedom. Anne Hutchison challenged the accepted role of women within the church by openly speaking out against church leaders. The Pequot War caused New England colonists to wipe out the Pequot tribe. The New England Confederation in 1643 was a military alliance intended to defend the New England colonies against potential threats. King PhilipÕs War happened between 1675 and 1676 and was when the leader of the Wampanoags were defeated by the colonists. This was the end of major Native resistance to the New England colonies. The Middle Colonies were the breadbasket of America. New York was originally a Dutch colony called New Amsterdam. Charles the Second sends a military expedition and grants area to his brother James the Duke of York. Pennsylvania was founded by William Penn as a refuge for Quakers. It was a very liberal colony. It treated Native Americans fairly. It practiced religious toleration and freedom. It extended rights to women. It was demographically, religiously, and ethnically diverse. Mercantilism meant that colonies were designed to enrich the mother country. The Navigation Acts established that 1. Trade carried only in English or colonial ships 2. Trade had to pass through English ports 3. Certain enumerated goods from the colonies could be exported only to England (tobacco, etc.). Smuggling was a problem. The Dominion of New England of 1686 implemented to increase royal control over the colonies. Sir Edmund Andros was appointed by the king. He was very unpopular as he enforced the Navigation Acts and limited town meetings.
[SEP]

[TEXT]
welcome back to Jos productions today we're going to break down English colonial society what was life like in the colonies politics religion slavery all that stuff we're going to cover in this video key point to keep in mind regional differences existed between the British colonies remember we have the New England region the middle colonies the Chesapeake and the Lower South and there were reasons for these differences who came to these colonies why they came and really important you understand the environmental and geographic variations of these different regions such as climate Natural Resources and how this influenced their development and as you can see on the map right there some of the different variations between these regions and real quick review make sure you know the differences in similarities between the Chesapeake versus the New England colonies they love asking about this topic so quick review of the New England region remember there were largely Puritan religious motives for colonization and although these individuals whether it be the Pilgrims or the Puritans are coming over for religious motives keep in mind they are not tolerant of other religions they're going to develop a closed-end homogeneous society settlements are settled around towns the life expectancy is longer than the Chesapeake it's also longer than what it was in England it's a much more stable society compared to the Chesapeake region there is going to be the importance of religion in the colonies obviously family life is going to be key to the colonies and education in fact they're going to require schools to be built and as you can see on that town map schools churches you got it all right there town hall meetings are going to be a unique characteristic of the New England society all adult male church members could participate in this direct democracy large number of immigrants are going to come to the New England colonies and they're also going to have a very high birthrate because you're going to have more of an equal distribution of men and women there's not going to be big farming no cash crops because of the long winters and short growing season so this area is going to have a mixed economy you're going to have some agriculture trade shipbuilding and like I said Boston's going to play a key role in the economic health of this region like we mentioned make sure you can compare the New England colonies especially to the Chesapeake which is Virginia and Maryland but the southern colonies shared some characteristics with one another they are largely especially in the beginning a male-dominated society remember the first people to come to Jamestown were men looking to get wealthy this region has a much warmer climate longer growing season life was harsh you have all sorts of diseases like malaria hot and humid and you have a lower birth rate because there's less women in this region whereas the New England colonies are a tight knit society the southern colonies the southern plantation colonies are going to have a defined hierarchy of wealth and status you're going to get the rise of the southern gentry so much wider gap between the wealthy and the poor in the Chesapeake and the southern colonies 

[TEXT]
in fact a big reason for that is the rise of the cash crop plantation economies you know the southern planters are going to be the top dogs in the colony they're going to dominate not only the economics but also the politics of the region so in the Chesapeake you get the importance of tobacco remember in South Carolina you get rice and even down in the British West Indies you have sugarcane there are fewer cities that develop in the south obviously because of the agricultural nature of the economy but it's important to keep in mind the labor system slavery existed everywhere in the 13 British colonies but you're going to have this transition from indentured servants to slavery especially after Bacon's Rebellion and there's a lot of different reasons for this transition to slavery make sure you know them one there's an abundance of land - there's a shortage of indentured servants that are coming over to the new world 3 there's no way to enslave the native population they would just run away or attack or die of disease and 4 there's European demand for colonial Goods so the transition gets made to African slavery in fact in South Carolina the majority of the population is going to be made up of African slaves and throughout the South slavery is going to play a much larger role in the southern economy so a little bit more explanation about slavery in colonial America one is the triangular trade route this is a three-part trade route forming a triangle slaves and goods are moving from Africa to the Caribbean and to the colonies and you could see some of those goods that are brought between the regions also very often goods would be going to Europe as well slaves brought over largely from West Africa are going to experience something horrendous dehumanizing called the Middle Passage you could see the conditions that these individuals were brought over in it was all about maximizing profit and bringing large numbers of people to the New World keep in mind slavery in North America was race-based it was based upon ideas and perceptions of superiority and slaves were considered property slave culture is going to develop as a blend of African and American traditions blending these two kind of cultures together to create a truly unique African American culture you'll see this in African American religion song and so on it's important to note that there is a variety of tribes being brought over from different parts of Africa and they're not just going to the 13 colonies as you can see on this graphic right there the vast majority of slaves are going to be going to the Caribbean islands and also to Brazil but slavery in British North America although much smaller is going to play a huge role in colonial society there are going to be some attempts at rebellion the most famous and one of the few was the Stono uprising in 1739 South Carolina slaves along the Stono River tried to get to Spanish Florida where they were promised freedom but unfortunately the rebellion was defeated and it contributed to stricter laws black code slave codes that regulated the movement and the freedoms of slaves in the colonies in spite of the fact that there were few rebellions 

[TEXT]
it's important to note that there was different forms of resistance resistance to slavery was common and it took the form of work slowdowns running away faking illness and other things to kind of disrupt the slave system aside from the issue slavery religion created kind of problems in the colonies and one of the big things was the religious passion was fading in the New England colonies fewer and fewer people were having a conversion so less Puritans practicing means the colony is losing its original mission to deal with this the halfway covenant was passed in 1660 to in the New England colonies and it said individuals could become partial church members even if they did not have a conversion and the idea behind this was to lessen the Puritan practices they're going to be less strict in order to increase church membership and it was successful at doing so and as we talk about religion in this issue of religious practice it's important to note that religious freedom the Massachusetts Bay Colony did not allow freedom of religion but some religious toleration existed in a few British colonies for example you saw Pennsylvania with the Quakers Rhode Island separation of church and state with Roger Williams in Maryland with its Catholic population extended religious toleration but only to Christians and religious freedom is going to be a key cornerstone of the new nation so there are traditions established during the colonial period a real wacky event happens in 1692 in Salem Massachusetts it's the Salem witch trials during the trials 19 people are hung and one person was even pressed to death that's a scene in one of the museums in Salem gruesome stuff most of the accused were from the money-making class and the people who were accusing them were farmers and really what you see in Salem is it reflects a growing tension over the changing nature of the colony from a religious kind of motives to a profit-driven commercialism so you see the tension between the rich and the poor in colonial New England speaking of religion a really important event that all colonies experienced was the Great Awakening many people were tired of the boring sermons that were traditionally practiced throughout the colonies and the Great Awakening was a religious revival in the 1730's 240s that spread throughout the colonies this is the spread of religious feeling throughout the colonies many people convert it to different religions and some key figures you should know about one Jonathan Edwards he sparks the Great Awakening with his sermons he basically said God was angry at human sinfulness and his most famous sermon sinners in the hands of an angry god some scary stuff another figure is George Whitefield he introduced a new energized style of evangelical preaching George Whitefield led many revival meetings were sinners professed being saved and conversions took place out on the frontier a key part of the Great Awakening was this idea that ordinary people with faith and belief in God could understand the Gospels without the Church ministers telling them what to believe this divided people new lights were supporters of the Great Awakening 

[TEXT]
old lights were against this new style of preaching and the impact of the Great Awakening was huge you have new universities forming such as Dartmouth Princeton Brown some of the Ivy League universities today they start off as religious based institutions this leads to greater religious independence and diversity you have all sorts of new churches forming you can see on the map the different colors with the different types of churches throughout the colonies and as a result the strengthened calls for separation of church and state if you have lots of different religions you can't have any one church supported by the state and finally this is the first mass movement shared amongst all of the colonists this great awakening spread throughout the colonies it did not matter your social status your region and it happened throughout and so this was a shared experience and key to this is people are changing the way they view Authority common people are making their own decisions with regard to religion and later on this resistance to established Authority will be extended towards the British so keep in mind all of the impacts of the rate awakening we've already mentioned the idea of mercantilism remember that were various mercantile laws that were passed to regulate colonial trade and to benefit England you have the navigation acts the molasses Act and the basic principle behind mercantilism was that nations such as England should become self-sufficient and the colonies should enrich the mother country however the goals and interests of European leaders for example in England at times diverge from those of colonial citizens in other words many colonists did not like these laws such as the Navigation Acts luckily there was this period of solitary neglect throughout the early 17th century where the British had relative indifference to colonial governance they kind of just let them do their thing there were some things that made the colonists smile over the mercantile policies for example colonial shipbuilding developed especially in the New England colonies as a result of these requirements that Goods must travel in either British or colonial ships as a result of England being their mama the colonists were provided protection of the British military and mercantile policies provided Chesapeake tobacco farmers a monopoly in England remember certain enumerated Goods could only be sold to England tobacco was one of them however there were some reasons to be mad some bad things about mercantilism it restricted development of colonial manufacturing they had to buy the goods from British manufacturing so therefore the economy of the colonies did not diversify very often they had to buy higher priced manufactured goods from England and farmers had to accept lower prices for their enumerated crops so although they had a guaranteed market they could not sell them to the highest buyer and this was no bueno in the minds of many colonists resentment over laws and posed from a distant government in London did lead to times of resistance recall England attempted to integrate the colonies into a coherent hierarchical Imperial structure with the dominion of New England 

[SUMM]
Sir Edmund and came over started enforcing the navigation act trying to bring more money over to London and eventually that falls apart in 1688 with the Glorious Revolution basically under the Glorious Revolution there is an overthrow of James ii and William and Mary take the throne and this is important in the colonies for a couple of reasons one over in England they put limits on the power of the monarchy and the colonists once the Glorious Revolution takes place they rebelled against the dominion of New England colonists successfully resisted some English policies however it's important to note that the big turning point will happen in 1763 at the end of the Seven Years War check out the next video and finally colonial politics there was the gradual development of democratic institutions in the colonies and colonial experiences with self-government and you're going to see this in various examples we covered in previous videos such as the Mayflower Compact the town hall meetings the House of Burgesses the elected representative assemblies in places like Pennsylvania keep in mind many people were still excluded for example there were property requirements or religious qualifications and England ultimately was still in charge so in the colonies there wasn't widespread democratization taking place there was a ruling colonial elite that was usually made up of the wealthy or people in the powerful in the church but the colonies are beginning to develop different political institutions an example of colonial political life evolving during this time could be seen in the Sanger case in 1733 which advanced the freedom of the press and basically what happened that newspaper that you see right there was printed by John Peter Zenger and he printed a newspaper that was critical of the royal governor in New York and that led some people to get that face you see right there as a result of this newspaper he is charged with libel but the jury ruled that Zanger was not guilty and what happens is in the Saenger case you see that the it's rule that you could be critical of elected officials if the statements were true and although this case does not allow full freedom of the press it does establish principles that allow people to be critical of those in power something that's going to be very key to a healthy democracy and the last thing to keep in mind is there was ethnically of the colonies as well most of the people who came over for from England but you get a growing group of people coming from other parts of the world we've already mentioned the large African population in South Carolina forcibly brought here because of slavery we also have the huge amount of people from England many of them Puritans up in this region but you also get a growing scots-irish population in places like Pennsylvania and as you can see on this map the people that settled the thirteen colonies came from all sorts of different ethnic groups that's going to do it for this video thank you for watching if the video helped you out click like if you have any questions or comments post them below and if you haven't already done so tell all your friends about Joe's productions and make sure you subscribe have a beautiful night peace

[SUMM]
In the New England colonies, there were Puritan religious motives for colonization. These were close-knit homogeneous society. There was an importance of religion, family, and education, as schools were required. There were Town Hall meetings. They received a large number of immigrants and a high birthrate. There was a mixed economy based on agriculture, trade, and shipbuilding. In the Southern Plantation colonies, it was male dominated society, had a warmer climate, had a harsh life, and had a lower birth rate. There was a defined hierarchy of wealth and status. These were cash crop plantation economies. Very few cities developed. The labor system moved from indentured servants to slavery. There was a transition to slavery because of an abundance of land, a shortage of indentured servants, no way to enslave the native population, and a European demand for colonial goods. The triangular trade was a 3 part trade route where slaves and goods moved from Africa, the Carribbean, and the colonies. The journey from Africa to the Western Hemisphere was known as the ÒMiddle passageÓ. Slave culture was a blend of African and American cultures based on a variety of tribes from different parts of Africa. The Stono Uprising in 1739 South Carolina was one of the few slave revolts in colonial America. They tried to get to Spanish Florida where they were promised freedom. The rebellion was defeated and contributed to stricter laws regulating slaves. Religious passion was fading in the New England colonies. The Half Way Covenant in 1662 said that individuals could become partial church members even if they did not have a conversion. The Massachussetts Bay colony did not allow freedom of religion. Some religious toleration existed in a few British colonies, as Pennsylvania had Quakers, Rhode Island had separation of church and state, and Maryland had toleration for all Christians. The Great Awakening was a religious revival in the 1730s-1740s that spread throughout the colonies. Many people convert. Jonathan Edwards delivered the speech ÒSinners in the Hands of an Angry GodÓ. George Whitefield introduced a new energized style of evangelical preaching. This saw the New Lights, who were supporters, versus Old Lights, who were against it. This led to the new universities being formed such as Dartmouth, Princeton, Brown, and more. Greater religious independence and diversity resulted, and new churches formed. This strengthened calls for the separation of church and state. This was the first mass movement shared amongst colonists. Various mercantile laws were passed to regulate colonial trade and to benefit England such as the Navigation Acts and the Molasses Act. The goals and interests of European leaders at times diverged from those of colonial citizens. Salutary neglect was defined as relative indifference to colonial governance. The good was that colonial shipbuilding developed. This provided protection of the British military. This provided Chesapeake tobacco a monopoly in England. The bad was that it restricted the development of colonial manufacturing. England attempted to integrate the colonies into a coherent, hierarchical imperial structure known as the Dominion of New England in 1686. The Glorious Revolution in 1688 led to the overthrow of James II and William and Mary take the throne. This limits the power of the monarchy. The colonists rebel against the Dominion of England. The big turning point was the end of the seven years war. Colonial politics saw the gradual development of democratic institutions in the colonies such as the Mayflower Compact and Town Hall Meetings. Many people were still excluded and England was ultimately still in charge. The Zenger Case of 1733 advanced the freedom of the press.
[SEP]

[TEXT]
alright alright alright today we are going to be taking a look at the administration's of John Tyler and James K Polk and roughly the period 1840 to 1848 if you're reading any of those American history books this lecture is going to help you out so we start with the election of 1840 remember there's that whole Tippecanoe and Tyler too the Whigs pick William Henry Harrison as their candidate the war hero from Tippecanoe and his vice-president is actually a former Democrat by the name of John Tyler and because of some personal beef with Andrew Jackson he leaves the Democratic Party and joins the Whig ticket in 1840 they win got a cool slogan Tippecanoe and Tyler too and unfortunately for your homeboy William Henry Harrison after 32 days in office he dies gives a super long inaugural address and just dies shortest term president ever now the problem is William Henry Harrison is now dead the first president to die while in office 1841 and the Whig party starts having beef with the new president John Tyler so the vice president becomes president but he holds many Democrat beliefs he's a Jacksonian at heart state rides kind of guy and he starts causing all sorts of problems for the Whig party because he blocks some of their goals for example he vetoes a bill to re-up the National Bank he puts a bill in place to end the independent Treasury system and the Whig party especially people like Henry Clay and Daniel Webster all angry his entire cabinet resigns now Tyler a man without kind of a party the Whigs don't want him the Democrats don't want him he tries to build a following by annex in Texas remember Andrew Jackson had recognized the Lone Star Republic Martin Van Buren though and Jackson were not interested in bringing up that controversy of trying to annex Texas Tyler does it is defeated by Whigs in Congress they don't want any more slave states added to the Union so in 1844 Tyler basically he's out no one wants him the dark horse candidate is James K Polk he comes out of nowhere he's running against the political veteran Henry Clay under the Whig party and Polk wins now Polk one of the issues he brings up in the election is the annexation of Texas he wants to do it and it's going to happen in 1845 now here's what goes down Polk wants to annex Texas talks about it during the campaign as a goal that would benefit the entire nation but it's actually lame-duck president John Tyler who submits a treaty just as he's about to leave office and he does this by a joint resolution because under a joint resolution through Congress you only need a majority not the two-thirds approval of the Senate which is the normal route that most annexation treaties take so Tyler and Nexus Texas just before Polk takes office but Polk has some goals of his own one he wants to lower the tariffs he's a Democrat the Whigs kind of favor the higher tariffs he's also from the south he wants to lower that bad boy to a big thing manifest destiny national expansion and he has some places in mind or again during the campaign he talks about fifty four forty or fight

[TEXT]
he's going to take that from England he's going to annex Texas Tyler kind of preempts that and does first and he also wants to acquire California and it's worth taking a look at this idea of manifest destiny it's a basic belief that it was America's destiny to conquer and civilize the entire continent from the east coast to the west coast and in this there is a certain level of a built in white superiority belief in this idea this idea that the continent the people that are on it are not civilized and that we are the ones to conquer it and to bring civilization to the entire continent it's ignoring that there are Native Americans there and Mexico in England and other groups the term manifest destiny was first coined by John O'Sullivan in 1845 a newspaper editor but it's important to keep in to keep in mind western expansion had been going on for a very long time if you really want to get technical from the moment the colonies you know are founded back in 1607 and onward we've been moving west and with that comes problems but we've seen this even in the early nation's history 1803 we have the Louisiana Purchase under Thomas Jefferson that brings up issues such as the Missouri entering the Union we have the Missouri Compromise Jackson's Indian Removal policies in the 1830s these are all examples of the United States moving west occupying new land but what happens in the 1840s is the issue of slavery is going to complicate western expansion more and more frequently so in 1820 that compromise resolved it but it's going to pop back up let's talk about one of the non-controversial at least when it comes to the issue of slavery moments of expansion under Polk and that is the Oregon dispute during the campaign of 1844 Polk had openly said fifty-four forty or fight the boundary of the United States is going to be at that point on the map and if you recall under the anglo-american convention of 1818 the US and England had agreed to jointly occupy Oregon Territory with England now what ends up happening is more and more Americans are coming into the area along the Oregon Trail they're making that over two thousand mile journey and it's a major issue in the election of 1844 Polk's Lane you know laying it out there we're going to get this territory well there is no fight there is no 5440 because under the Oregon treaty of 1846 England agrees to give up its claim to that territory and the boundary between the United States and Canada will be the 49th parallel you see on the map now England does agree that to do this because partly they are guaranteed fishing rights and Vancouver Island so there is a peaceful resolution to this dispute however there won't be one with our beef with Mexico and what ends up happening is if you recall Mexico still viewed Texas as part of Mexico in fact they don't recognize this Lone Star Republic Santa Ana is very clear on this issue and they also have an issue with the boundary you know is that the Rio Grande or is it the new SS River well poke attempts to buy California from Mexico because of the whole Texas issue the relations between the two countries is strained 

[TEXT]
and you have his boy John Slidell going to Mexico trying to buy it California for 25 million dollars and basically Mexico refuses to even consider the offer Polk sends in Zachary Taylor into the disputed territory between Mexico and Texas and US forces are attacked in April of 1846 ultimately leading to the mexican-american war which will last a little under two years now it's important to keep in mind is this war which ends is very very controversial especially amongst northerners northern Whigs and even some northern Democrats oppose the war they see it as an attempt by southerners to extend slavery into new territories and they question especially Abraham Lincoln a young congressman from the north he introduces the spot resolution he basically says yo Polk show us if this was actually an attack on American soil and he's challenging the president's assertion that we were actually attacked on American soil you saw the controversy further when David Wilmont from I believe Pennsylvania tries to put something forward called the Wilmot Proviso which basically would have said hey we're going to ban slavery in any territory acquired from Mexico as a result of this war now this is in 1846 they haven't even won the war but they're pretty confident it passes the house because northerners have a number advantage but it is rejected by the Senate and what's important is southerners view these these protests from the north with increasing suspicion northerners are trying to attack or prevent our southern way of life well the war does take place it is horrible for Mexico they lose most of the major battles and it ends with the Treaty of Guadalupe Hidalgo in 1848 and it does a number of things basically the United States territory increases by one-third the United States is given California New Mexico and the rest of the Southwest which includes places like Arizona Utah Nevada and so on the United States also gets Mexico to agree to give up its claims to Texas and they do agree to accept the Rio Grande as the border between the two nations for Mexico this is devastating about half of Mexican territory is taken and this is going to create a huge strain on the relationship between these two countries and more importantly than that for a push is this is going to create new problems because as these new territories are added to the Union it's going to force the issue of slavery back into the center of national politics that's the summary of Tyler and Polk in Chapter 17 for the American Pageant in some of those other chapters hopefully you'll learn some stuff and you're going to get that five on that a push exam if you haven't already done so make sure you subscribe to Jose production it's on sale today you could do it for free and if it helped you out the video at all click like and post a comment said thanks brah thanks man appreciate it and you all have a wonderful day peace

[SUMM]
In the election of 1840, the Whigs chose William Henry Harrison as a President and John Tyler as Vice President. Tyler still holds many Democrat beliefs, and he starts to block goals of the Whig party, led by Henry Clay and Daniel Webster. He attempts to annex Texas, but he is defeated by Congress. In the Election of 1844, James K. Polk wins. During the lame duck period, John Tyler submitted a proposal and Congress annexed Texas. This was accomplished by a joint resolution, as it only needed a majority of both houses. It does not need a 2/3 approval by the Senate. The goals of James K. Polk were to lower the tariff, exploit national expansion and use manifest destiny, expand into Oregon, annex Texas, and acquire California. Manifest Destiny was the belief that it was AmericaÕs destiny to conquer and civilize the entire continent. It was built upon the belief of white superiority. The term was coined by John OÕSullivan in 1845. Western expansion had been going on for some time, as displayed by the Lousiana Purchase in 1803, the Missouri Compromise in 1820, and JacksonÕs Indian Removal policies in the 1830s. The issue of slavery complicates the issue of western expansion. The Oregon Dispute, known as the 54Õ 40 or Fight!, was rooted in the Anglo-American Convention of 1818, where the U.S. and England agreed to peacefully jointly occupy the Oregon Territory. The Oregon Trail saw many American settlers flood into the area. There was a major issue in the Election of 1844. The Oregon Treaty in 1846 did not cause war. Mexico still viewed Texas as part of Mexico. This caused a dispute over the river Rio Grande and Nueces river. Polk attempts to buy California from Mexico. The Slidell Mission was when Mexico refuses offer of 25 million dollars for California. Polk sends Zachary Taylor into disputed territory between Mexico and Texas. U.S. forces attacked in April 1846. The Northern Whigs oppose the war, as they see it as an attempt by Southerners to extend slavery. Lincoln introduces the ÒSpot ResolutionÓ, demanding to know if attack really took place on U.S. soil. The Wilmot Proviso attempted to ban slavery in any territory acquired from Mexico. This was passed by the House but rejected by the Senate. In the Treaty of Guadalupe-Hidalgo in 1848, Mexico gave up claims to Texas and accepts Rio Grande border. Mexico gave the U.S., California, New Mexico, and the rest of the Southwest. This increases U.S. territory by 1/3. Mexico lost about half its territory. This strains relations between the U.S. and Mexico.
[SEP]