[TEXT]

If I have a vector sitting here in 2D spacewe have a standard way to describe it with coordinates.In this case, the vector has coordinates [3, 2],which means going from its tail to its tipinvolves moving 3 units to the right and 2 units up.Now, the more linear-algebra-oriented way to describe coordinatesis to think of each of these numbers as a scalara thing that stretches or squishes vectors.You think of that first coordinate as scaling i-hatthe vector with length 1, pointing to the rightwhile the second coordinate scales j-hatthe vector with length 1, pointing straight up.The tip to tail sum of those two scaled vectorsis what the coordinates are meant to describe.You can think of these two special vectorsas encapsulating all of the implicit assumptions of our coordinate system.The fact that the first number indicates rightward motionthat the second one indicates upward motionexactly how far unit of distances.All of that is tied up in the choice of i-hat and j-hatas the vectors which are scalar coordinates are meant to actually scale.Anyway to translate between vectors and sets of numbersis called a coordinate systemand the two special vectors, i-hat and j-hat, are called the basis vectorsof our standard coordinate system.What I'd like to talk about hereis the idea of using a different set of basis vectors.For example, let's say you have a friend, Jenniferwho uses a different set of basis vectors which I'll call b1 and b2Her first basis vector b1 points up into the right a little bitand her second vector b2 points left and upNow, take another look at that vector that I showed earlierThe one that you and I would describe using the coordinates [3, 2]using our basis vectors i-hat and j-hat.Jennifer would actually describe this vector with the coordinates [5/3, 1/3]What this means is that the particular way to get to that vectorusing her two basis vectorsis to scale b1 by 5/3, scale b2 by 1/3then add them both together.In a little bit, I'll show you how you could have figured out those two numbers 5/3 and1/3.In general, whenever Jennifer uses coordinates to describe a vectorshe thinks of her first coordinate as scaling b1the second coordinate is scaling b2and she adds the results.What she gets will typically be completely differentfrom the vector that you and I would think of as having those coordinates.To be a little more precise about the setup hereher first basis vector b1is something that we would describe with the coordinates [2, 1]and her second basis vector b2is something that we would describe as [-1, 1].But it's important to realize from her perspective in her systemthose vectors have coordinates [1, 0] and [0, 1]They are what define the meaning of the coordinates [1, 0] and [0, 1] in her world.So, in effect, we're speaking different languagesWe're all looking at the same vectors in spacebut Jennifer uses different words and numbers to describe them.Let me say a quick word about how I'm representing things herewhen I animate 2D spaceI typically use this square gridBut that grid is just a constructa way to visualize our coordinate systemand so it depends on our choice of basis.Space itself has no intrinsic grid.Jennifer might draw her own gridwhich would be an equally made-up constructmeant is nothing more than a visual toolto help follow the meaning of her coordinates.Her origin, though, would actually line up with ourssince everybody agrees on what the coordinates [0, 0] should mean.It's the thing that you getwhen you scale any vector by 0.But the direction of her axesand the spacing of her grid lineswill be different, depending on her choice of basis vectors.So, after all this is set upa pretty natural question to ask isHow we translate between coordinate systems?If, for example, Jennifer describes a vector with coordinates [-1, 2]what would that be in our coordinate system?How do you translate from her language to ours?Well, what our coordinates are sayingis that this vector is -1 b1 + 2 b2.And from our perspectiveb1 has coordinates [2, 1]and b2 has coordinates [-1, 1]So we can actually compute -1 b1 + 2 b2as they're represented in our coordinate systemAnd working this outyou get a vector with coordinates [-4, 1]So, that's how we would describe the vector that she thinks of as [-1, 2]This process here of scaling each of her basis vectorsby the corresponding coordinates of some vectorthen adding them togethermight feel somewhat familiarIt’s matrix-vector multiplicationwith a matrix whose columns represent Jennifer's basis vectors in our languageIn fact, once you understand matrix-vector multiplicationas applying a certain linear transformationsay, by watching what I've you to be the most important video in this series, chapter 3.There's a pretty intuitive way to think about what's going on here.A matrix whose columns represent Jennifer's basis vectorscan be thought of as a transformationthat moves our basis vectors, i-hat and j-hatthe things we think of when we say [1,0] and [0, 1]to Jennifer's basis vectorsthe things she thinks of when she says [1, 0] and [0, 1]To show how this workslet's walk through what it would meanto take the vector that we think of as having coordinates [-1, 2]and applying that transformation.Before the linear transformationwe’re thinking of this vectoras a certain linear combination of our basis vectors -1 x i-hat + 2 x j-hat.And the key feature of a linear transformationis that the resulting vector will be that same linear combinationbut of the new basis vectors-1 times the place where i-hat lands + 2 times the place where j-hat lands.So what this matrix doesis transformed our misconception of what Jennifer meansinto the actual vector that she's referring to.I remember that when I was first learning thisit always felt kind of backwards to me.Geometrically, this matrix transforms our grid into Jennifer's grid.But numerically, it's translating a vector described in her language to our language.What made it finally clicked for mewas thinking about how it takes our misconception of what Jennifer meansthe vector we get using the same coordinates but in our systemthen it transforms it into the vector that she really meant.What about going the other way around?In the example I used earlier this videowhen I have the vector with coordinates [3, 2] in our systemHow did I compute that it would have coordinates [5/3, 1/3] in Jennifer system?You start with that change of basis matrixthat translates Jennifer's language into oursthen you take its inverse.Remember, the inverse of a transformationis a new transformation that corresponds to playing that first one backwards.In practice, especially when you're working in more than two dimensionsyou'd use a computer to compute the matrix that actually represents this inverse.In this case, the inverse of the change of basis matrixthat has Jennifer's basis as its columnsends up working out to have columns [1/3, -1/3] and [1/3, 2/3]So, for exampleto see what the vector [3, 2] looks like in Jennifer's systemwe multiply this inverse change of basis matrix by the vector [3, 2]which works out to be [5/3, 1/3]So that, in a nutshellis how to translate the description of individual vectorsback and forth between coordinate systems.The matrix whose columns represent Jennifer's basis vectorsbut written in our coordinatestranslates vectors from her language into our language.And the inverse matrix does the opposite.But vectors aren't the only thing that we describe using coordinates.For this next partit's important that you're all comfortablerepresenting transformations with matricesand that you know how matrix multiplicationcorresponds to composing successive transformations.Definitely pause and take a look at chapters 3 and 4if any of that feels uneasy.Consider some linear transformationlike a 90°counterclockwise rotation.When you and I represent this with the matrixwe follow where the basis vectors i-hat and j-hat each go.i-hat ends up at the spot with coordinates [0, 1]and j-hat end up at the spot with coordinates [-1, 0]So those coordinates become the columns of our matrixbut this representationis heavily tied up in our choice of basis vectorsfrom the fact that we're following i-hat and j-hat in the first placeto the fact that we're recording their landing spotsin our own coordinate system.How would Jennifer describe this same 90°rotation of space?You might be tempted to justtranslate the columns of our rotation matrix into Jennifer's language.But that's not quite right.Those columns represent where our basis vectors i-hat and j-hat go.But the matrix that Jennifer wantsshould represent where her basis vectors landand it needs to describe those landing spots in her language.Here's a common way to think of how this is done.Start with any vector written in Jennifer's language.Rather than trying to follow what happens to it in terms of her languagefirst, we're going to translate it into our languageusing the change of basis matrixthe one whose columns represent her basis vectors in our language.This gives us the same vectorbut now written in our language.Then, apply the transformation matrix to what you getby multiplying it on the left.This tells us where that vector landsbut still in our language.So as a last stepapply the inverse change of basis matrixmultiplied on the left as usualto get the transformed vectorbut now in Jennifer's language.Since we could do thiswith any vector written in her languagefirst, applying the change of basisthen, the transformationthen, the inverse change of basisThat composition of three matricesgives us the transformation matrix in Jennifer's language.it takes in a vector of her languageand spits out the transformed version of that vector in her languageFor this specific examplewhen Jennifer's basis vectors look like [2, 1] and [-1, 1] in our languageand when the transformation is a 90°rotationthe product of these three matricesif you work through ithas columns [1/3, 5/3] and [-2/3, -1/3]So if Jennifer multiplies that matrixby the coordinates of a vector in her systemit will return the 90°rotated version of that vectorexpressed in her coordinate system.In general, whenever you see an expression like A^(-1) M Ait suggests a mathematical sort of empathy.That middle matrix represents a transformation of some kind, as you see itand the outer two matrices represent the empathy, the shift in perspectiveand the full matrix product represents that same transformationbut as someone else sees it.For those of you wondering why we care about alternate coordinate systemsthe next video on eigen vectors and eigen valueswill give a really important example of this.See you then!

[SUMMARY]

The coordinate system is represented by a set of basis vectors(i hat and j hat). A different set of basis vectors can be used to create a new coordinate system that represent the same point.Each basis will have its own grid (or another way of looking at the same region). To convert between different coordinate systems, you need to use the change of basis matrix (multiply change of base matrix by vector). This converts a given vector from one base to another. To go the opposite direction, take the inverse of the change of basis matrix. The change of basis matrix is simple a set of vectors that describe the basis of the new coordinate system. 

[TEXT]

Unfortunately, no one can be told, what the Matrix is. You have to see it for yourself. - MorpheusSurprisingly apt words on the importance of understanding matrix operations visuallyHey everyone!If I had to choose just one topic that makesall of the others in linear algebra start to clickand which too often goes unlearned the first time a student takes linear algebra,it would be this one: the idea of a linear transformation and itsrelation to matrices.For this video, I'm just going to focus on what these transformations look like in thecase of two dimensionsand how they relate to the idea of matrix-vector multiplication.In particular, I want to show you a way to think about matrix-vector multiplication thatdoesn't rely on memorization.To start, let's just parse this term “linear transformation”.“Transformation” is essentially a fancy word for “function”.It's something that takes in inputs and spits out an output for each one.Specifically in the context of linear algebra, we like to think about transformations thattake in some vector and spit out another vector.So why use the word “transformation” instead of “function” if they mean the same thing?Well,it's to be suggestive of a certain way to visualize this input-output relation.You see, a great way to understand functions of vectors is to use movement.If a transformation takes some input vector to some output vector,we imagine that input vector moving over to the output vector.Then to understand the transformation as a whole,we might imagine watching every possible input vector move over to its corresponding output vector.It gets really crowded to think about all of the vectors all at once, each one is an arrow,So, as I mentioned last video, a nice trick is to conceptualize each vector, not as an arrow,but as a single point: the point where its tip sits.That way to think about a transformation taking every possible input vector to some output vector,we watch every point in space moving to some other point.In the case of transformations in two dimensions,to get a better feel for the whole “shape” of the transformation,I like to do this with all of the points on an infinite grid.I also sometimes like to keep a copy of the grid in the background,just to help keep track of where everything ends up relative to where it starts.The effect for various transformations, moving around all of the points in space, is,you've got to admit,beautiful.It gives the feeling of squishing and morphing space itself.As you can imagine, though arbitrary transformations can look pretty complicated,but luckily linear algebra limits itself to a special type of transformation,ones that are easier to understand, called “linear” transformations.Visually speaking, a transformation is linear if it has two properties:all lines must remain lines, without getting curved,and the origin must remain fixed in place.For example, this right here would not be a linear transformation since the lines get all curvyand this one right here, although it keeps the line straight,is not a linear transformation because it moves the origin.This one here fixes the origin and it might look like it keeps line straight,but that's just because I'm only showing the horizontal and vertical grid lines,when you see what it does to a diagonal line, it becomes clear that it's not at all linearsince it turns that line all curvy.In general, you should think of linear transformations as keeping grid lines parallel and evenly spaced.Some linear transformations are simple to think about, like rotations about the origin.Others are a little trickier to describe with words.So how do you think you could describe these transformations numerically?If you were, say, programming some animations to make a video teaching the topicwhat formula do you give the computer so that if you give it the coordinates of a vector,it can give you the coordinates of where that vector lands?It turns out that you only need to record where the two basis vectors, i-hat and j-hat, each land.and everything else will follow from that.For example, consider the vector v with coordinates (-1,2),meaning that it equals -1 times i-hat + 2 times j-hat.If we play some transformation and follow where all three of these vectors gothe property that grid lines remain parallel and evenly spaced has a really important consequence:the place where v lands will be -1 times the vector where i-hat landedplus 2 times the vector where j-hat landed.In other words, it started off as a certain linear combination of i-hat and j-hatand it ends up is that same linear combination of where those two vectors landed.This means you can deduce where v must go based only on where i-hat and j-hat each land.This is why I like keeping a copy of the original grid in the background;for the transformation shown here we can read off that i-hat lands on the coordinates (1,-2).and j-hat lands on the x-axis over at the coordinates (3, 0).This means that the vector represented by (-1) i-hat + 2 times j-hatends up at (-1) times the vector (1, -2) + 2 times the vector (3, 0).Adding that all together, you can deduce that it has to land on the vector (5, 2).This is a good point to pause and ponder, because it's pretty important.Now, given that I'm actually showing you the full transformation,you could have just looked to see the v has the coordinates (5, 2),but the cool part here is that this gives us a technique to deduce where any vectors land,so long as we have a record of where i-hat and j-hat each land,without needing to watch the transformation itself.Write the vector with more general coordinates x and y,and it will land on x times the vector where i-hat lands (1, -2),plus y times the vector where j-hat lands (3, 0).Carrying out that sum, you see that it lands at (1x+3y, -2x+0y).I give you any vector, and you can tell me where that vector lands using this formulawhat all of this is saying is that a two dimensional linear transformationis completely described by just four numbers:the two coordinates for where i-hat landsand the two coordinates for where j-hat lands.Isn't that cool?it's common to package these coordinates into a two-by-two grid of numbers,called a two-by-two matrix,where you can interpret the columns as the two special vectorswhere i-hat and j-hat each land.If you're given a two-by-two matrix describing a linear transformationand some specific vectorand you want to know where that linear transformation takes that vector,you can take the coordinates of the vectormultiply them by the corresponding columns of the matrix, then add together what you get.This corresponds with the idea of adding the scaled versions of our new basis vectors.Let's see what this looks like in the most general casewhere your matrix has entries a, b, c, dand remember, this matrix is just a way of packaging the information needed to describea linear transformation.Always remember to interpret that first column, (a, c),as the place where the first basis vector landsand that second column, (b, d), is the place where the second basis vector lands.When we apply this transformation to some vector (x, y), what do you get?Well,it'll be x times (a, c) plus y times (b, d).Putting this together, you get a vector (ax+by, cx+dy).You can even define this as matrix-vector multiplicationwhen you put the matrix on the left of the vectorlike it's a function.Then, you could make high schoolers memorize this,without showing them the crucial part that makes it feel intuitive.But,isn't it more fun to think about these columnsas the transformed versions of your basis vectorsand to think about the resultsas the appropriate linear combination of those vectors?Let's practice describing a few linear transformations with matrices.For example,if we rotate all of space 90° counterclockwisethen i-hat lands on the coordinates (0, 1)and j-hat lands on the coordinates (-1, 0).So the matrix we end up with has columns (0, 1), (-1, 0).To figure out what happens to any vector after 90° rotation,you could just multiply its coordinates by this matrix.Here's a fun transformation with a special name, called a “shear”.In it, i-hat remains fixedso the first column of the matrix is (1, 0),but j-hat moves over to the coordinates (1,1)which become the second column of the matrix.And, at the risk of being redundant here,figuring out how a shear transforms a given vectorcomes down to multiplying this matrix by that vector.Let's say we want to go the other way around,starting with the matrix, say with columns (1, 2) and (3, 1),and we want to deduce what its transformation looks like.Pause and take a moment to see if you can imagine it.One way to do thisis to first move i-hat to (1, 2).Then, move j-hat to (3, 1).Always moving the rest of space in such a waythat keeps grid lines parallel and evenly spaced.If the vectors that i-hat and j-hat land on are linearly dependentwhich, if you recall from last video,means that one is a scaled version of the other.It means that the linear transformation squishes all of 2D spaceon to the line where those two vectors sit,also known as the one-dimensional spanof those two linearly dependent vectors.To sum up, linear transformationsare a way to move around spacesuch that the grid lines remain parallel and evenly spacedand such that the origin remains fixed.Delightfully,these transformations can be described using only a handful of numbers.The coordinates of where each basis vector lands.Matrices give us a language to describe these transformationswhere the columns represent those coordinatesand matrix-vector multiplication is just a way to computewhat that transformation does to a given vector.The important take-away here is that,every time you see a matrix,you can interpret it as a certain transformation of space.Once you really digest this idea,you're in a great position to understand linear algebra deeply.Almost all of the topics coming up,from matrix multiplication to determinant,change of basis, eigenvalues, ...all of these will become easier to understandonce you start thinking about matrices as transformations of space.Most immediately, in the next videoI'll be talking about multiplying two matrices together. See you then!

[SUMMARY]

Linear Transformation is function that takes in inputs and spits out an output. In Linear Algebra, it is taking in one vector and returning another vector. All linear transformations maintain the origin and lines. You deduce where a certain point ends up just based on the basis vectors of the new coordinate system. The basis vectors of the new coordinate system make up the coordinate matrix. 

[TEXT]

"Eigenvectors and eigenvalues" is one of those topics that a lot of students find particularly unintuitive. Questions like "why are we doing this" and "what does this actually mean" are too often left just floating away in an unanswered sea of computations. And as I put out the videos of the series, a lot of you have commented about looking forward to visualizing this topic in particular. I suspect that the reason for this is not so much that eigen-things are particularly complicated or poorly explained. In fact, it's comparatively straightforward and I think most books do a fine job explaining it. The issue is that it only really make sense if you have a solid visual understanding for many of the topics that precede it. Most important here is that you know how to think about matrices as linear transformations, but you also need to be comfortable with things like determinants, linear systems of equations and change of basis. Confusion about eigen stuffs usually has more to do with a shaky foundation in one of these topics than it does with eigenvectors and eigenvalues themselves. To start, consider some linear transformation in two dimensions, like the one shown here. It moves the basis vector i-hat to the coordinates (3, 0) and j-hat to (1, 2), so it's represented with a matrix, whose columns are (3, 0) and (1, 2). Focus in on what it does to one particular vector and think about the span of that vector, the line passing through its origin and its tip. Most vectors are going to get knocked off their span during the transformation. I mean, it would seem pretty coincidental if the place where the vector landed also happens to be somewhere on that line. But some special vectors do remain on their own span, meaning the effect that the matrix has on such a vector is just to stretch it or squish it, like a scalar. For this specific example, the basis vector i-hat is one such special vector. The span of i-hat is the x-axis, and from the first column of the matrix, we can see that i-hat moves over to 3 times itself, still on that x axis. What's more, because of the way linear transformations work, any other vector on the x-axis is also just stretched by a factor of 3 and hence remains on its own span. A slightly sneakier vector that remains on its own span during this transformation is (-1, 1), it ends up getting stretched by a factor of 2. And again, linearity is going to imply that any other vector on the diagonal line spanned by this guy is just going to get stretched out by a factor of 2. And for this transformation, those are all the vectors with this special property of staying on their span. Those on the x-axis getting stretched out by a factor of 3 and those on this diagonal line getting stretched by a factor of 2. Any other vector is going to get rotated somewhat during the transformation, knocked off the line that it spans. As you might have guessed by now, these special vectors are called the "eigenvectors" of the transformation, and each eigenvector has associated with it, what's called an "eigenvalue", which is just the factor by which it stretched or squashed during the transformation. Of course, there's nothing special about stretching vs. squishing or the fact that these eigenvalues happen to be positive. In another example, you could have an eigenvector with eigenvalue -1/2, meaning that the vector gets flipped and squished by a factor of 1/2. But the important part here is that it stays on the line that it spans out without getting rotated off of it. For a glimpse of why this might be a useful thing to think about, consider some three-dimensional rotation. If you can find an eigenvector for that rotation, a vector that remains on its own span, what you have found is the axis of rotation. And it's much easier to think about a 3-D rotation in terms of some axis of rotation and an angle by which is rotating, rather than thinking about the full 3-by-3 matrix associated with that transformation. In this case, by the way, the corresponding eigenvalue would have to be 1, since rotations never stretch or squish anything, so the length of the vector would remain the same. This pattern shows up a lot in linear algebra. With any linear transformation described by a matrix, you could understand what it's doing by reading off the columns of this matrix as the landing spots for basis vectors. But often a better way to get at the heart of what the linear transformation actually does, less dependent on your particular coordinate system, is to find the eigenvectors and eigenvalues. I won't cover the full details on methods for computing eigenvectors and eigenvalues here, but I'll try to give an overview of the computational ideas that are most important for a conceptual understanding. Symbolically, here's what the idea of an eigenvector looks like. A is the matrix representing some transformation, with v as the eigenvector, and λ is a number, namely the corresponding eigenvalue. What this expression is saying is that the matrix-vector product - A times v gives the same result as just scaling the eigenvector v by some value λ. So finding the eigenvectors and their eigenvalues of a matrix A comes down to finding the values of v and λ that make this expression true. It's a little awkward to work with at first, because that left hand side represents matrix-vector multiplication, but the right hand side here is scalar-vector multiplication. So let's start by rewriting that right hand side as some kind of matrix-vector multiplication, using a matrix, which has the effect of scaling any vector by a factor of λ. The columns of such a matrix will represent what happens to each basis vector, and each basis vector is simply times λ, so this matrix will have the number λ down the diagonal with 0's everywhere else. The common way to write this guy is to factor that λ out and write it as λ times I, where I is the identity matrix with 1's down the diagonal. With both sides looking like matrix-vector multiplication, we can subtract off that right hand side and factor out the v. So what we now have is a new matrix - A minus λ times the identity, and we're looking for a vector v, such that this new matrix times v gives the zero vector. Now this will always be true if v itself is the zero vector, but that's boring. What we want is a non-zero eigenvector. And if you watched Chapters 5 and 6, you'll know that the only way it's possible for the product of a matrix with a non-zero vector to become zero is if the transformation associated with that matrix squishes space into a lower dimension. And that squishification corresponds to a zero determinant for the matrix. To be concrete, let's say your matrix a has columns (2, 1) and (2, 3), and think about subtracting off a variable amount λ from each diagonal entry. Now imagine tweaking λ, turning a knob to change its value. As that value of λ changes, the matrix itself changes, and so the determinant of the matrix changes. The goal here is to find a value of λ that will make this determinant zero, meaning the tweaked transformation squishes space into a lower dimension. In this case, the sweet spot comes when λ equals 1. Of course, if we have chosen some other matrix, the eigenvalue might not necessarily be 1, the sweet spot might be hit some other value of λ. So this is kind of a lot, but let's unravel what this is saying. When λ equals 1, the matrix A minus λ times the identity squishes space onto a line. That means there's a non-zero vector v, such that A minus λ times the identity times v equals the zero vector. And remember, the reason we care about that is because it means A times v equals λ times v, which you can read off as saying that the vector v is an eigenvector of A, staying on its own span during the transformation A. In this example, the corresponding eigenvalue is 1, so v would actually just a fixed in place. Pause and ponder if you need to make sure that line of reasoning feels good. This is the kind of thing I mentioned in the introduction, if you didn't have a solid grasp of determinants and why they relate to linear systems of equations having non-zero solutions, an expression like this would feel completely out of the blue. To see this in action, let's revisit the example from the start with the matrix whose columns are (3, 0) and (1, 2). To find if a value λ is an eigenvalue, subtracted from the diagonals of this matrix and compute the determinant. Doing this, we get a certain quadratic polynomial in λ, (3-λ)(2-λ). Since λ can only be an eigenvalue if this determinant happens to be zero, you can conclude that the only possible eigenvalues are λ equals 2 and λ equals 3. To figure out what the eigenvectors are that actually have one of these eigenvalues, say λ equals 2, plug in that value of λ to the matrix and then solve for which vectors this diagonally altered matrix sends to 0. If you computed this the way you would any other linear system, you'd see that the solutions are all the vectors on the diagonal line spanned by (-1, 1). This corresponds to the fact that the unaltered matrix [(3, 0), (1, 2)] has the effect of stretching all those vectors by a factor of 2. Now, a 2-D transformation doesn't have to have eigenvectors. For example, consider a rotation by 90 degrees. This doesn't have any eigenvectors, since it rotates every vector off of its own span. If you actually try computing the eigenvalues of a rotation like this, notice what happens. Its matrix has columns (0, 1) and (-1, 0), subtract off λ from the diagonal elements and look for when the determinant is 0. In this case, you get the polynomial λ^2+1, the only roots of that polynomial are the imaginary numbers i and -i. The fact that there are no real number solutions indicates that there are no eigenvectors. Another pretty interesting example worth holding in the back of your mind is a shear. This fixes i-hat in place and moves j-hat one over, so its matrix has columns (1, 0) and (1, 1). All of the vectors on the x-axis are eigenvectors with eigenvalue 1, since they remain fixed in place. In fact, these are the only eigenvectors. When you subtract off λ from the diagonals and compute the determinant, what you get is (1-λ)^2, and the only root of this expression is λ equals 1. This lines up with what we see geometrically that all of the eigenvectors have eigenvalue 1. Keep in mind though, it's also possible to have just one eigenvalue, but with more than just a line full of eigenvectors. A simple example is a matrix that scales everything by 2, the only eigenvalue is 2, but every vector in the plane gets to be an eigenvector with that eigenvalue. Now is another good time to pause and ponder some of this before I move on to the last topic. I want to finish off here with the idea of an eigenbasis, which relies heavily on ideas from the last video. Take a look at what happens if our basis vectors just so happened to be eigenvectors. For example, maybe i-hat is scaled by -1 and j-hat is scaled by 2. Writing their new coordinates as the columns of a matrix, notice that those scalar multiples -1 and 2, which are the eigenvalues of i-hat and j-hat, sit on the diagonal of our matrix and every other entry is a 0. Anytime a matrix has 0's everywhere other than the diagonal, it's called, reasonably enough, a diagonal matrix. And the way to interpret this is that all the basis vectors are eigenvectors, with the diagonal entries of this matrix being their eigenvalues. There are a lot of things that make diagonal matrices much nicer to work with. One big one is that it's easier to compute what will happen if you multiply this matrix by itself a whole bunch of times. Since all one of these matrices does is scale each basis vector by some eigenvalue, applying that matrix many times, say 100 times, is just going to correspond to scaling each basis vector by the 100-th power of the corresponding eigenvalue. In contrast, try computing the 100-th power of a non-diagonal matrix. Really, try it for a moment, it's a nightmare. Of course, you will rarely be so lucky as to have your basis vectors also be eigenvectors, but if your transformation has a lot of eigenvectors, like the one from the start of this video, enough so that you can choose a set that spans the full space, then you could change your coordinate system so that these eigenvectors are your basis vectors. I talked about change of basis last video, but I'll go through a super quick reminder here of how to express a transformation currently written in our coordinate system into a different system. Take the coordinates of the vectors that you want to use as a new basis, which, in this case, means are two eigenvectors, that make those coordinates the columns of a matrix, known as the change of basis matrix. When you sandwich the original transformation putting the change of basis matrix on it's right and the inverse of the change of basis matrix on its left, the result will be a matrix representing that same transformation, but from the perspective of the new basis vectors coordinate system. The whole point of doing this with eigenvectors is that this new matrix is guaranteed to be diagonal with its corresponding eigenvalues down that diagonal. This is because it represents working in a coordinate system where what happens to the basis vectors is that they get scaled during the transformation. A set of basis vectors, which are also eigenvectors, is called, again, reasonably enough, an "eigenbasis". So if, for example, you needed to compute the 100-th power of this matrix, it would be much easier to change to an eigenbasis, compute the 100-th power in that system, then convert back to our standard system. You can't do this with all transformations. A shear, for example, doesn't have enough eigenvectors to span the full space. But if you can find an eigenbasis, it makes matrix operations really lovely. For those of you willing to work through a pretty neat puzzle to see what this looks like in action and how it can be used to produce some surprising results, I'll leave up a prompt here on the screen. It takes a bit of work, but I think you'll enjoy it. The next and final video of this series is going to be on abstract vector spaces. See you then!

[SUMMARY]

Eigenvectors are vectors that don't change span with the change of basis. Eigenvectors in the new basis remain in the same span, but may be squeezed or squished. You can find an Eigenvector by solving for A times v equals lambda times v, where lambda is a scalar. There are multiple eigenvectors for each eiganvalue.

[TEXT]

You probably don't have a problem playing video games or browsing social media on your phone. In fact I have no doubt you could sit in front of a screen and do both of those activities for 2 hours, or even longer without breaking your concentration. But what about half an hour of studying? Oof. That might be too hard. How about working on your side business for another hour? Hmm. Doesn't sound too appealing. Even though you logically know that studying, exercising, building a business or something equally productive, will bring you more benefits in the long run, you still prefer watching TV, playing video games and scrolling through social media. One might argue that it's obvious why. One activity is easy and doesn't require much effort, while the other activity is difficult and it requires you to apply yourself. But some people seem to have no problem studying, exercising, or working on their side projects, regularly. Which begs the question: Why are some people more motivated to tackle difficult things? And is there a way to make doing difficult things, easy? To answer this question, we need to look at this brain neurotransmitter: Dopamine. Dopamine is often considered a pleasure molecule. But that's not quite what it does. Dopamine is what makes us desire things. And it's that desire that gives us the motivation to get up and do stuff. If you're not sure how powerful dopamine is, let me introduce you to a few experiments neuroscientists did on rats. The researchers implanted electrodes in the brains of rats. Whenever the rat pulled a lever, the researchers stimulated the rat's reward system in the brain. The result was that the rats developed a craving so strong they kept pulling the lever, over and over for hours. The rats would refuse to eat or even sleep. They would just keep pressing the lever until they would drop from exhaustion. But then the process was reversed. The researchers blocked the release of dopamine in the brain's reward center. As a result, rats became so lethargic that even getting up to get a drink of water was not worth the effort. They wouldn't eat. They didn't want to mate. They didn't crave anything at all. You could say that the rats lost all will to live. However, if food was placed directly in their mouths, the rats would still eat and enjoy the food. They just didn't have the motivation to get up and do it themselves. You would think that it's thirst or hunger that motivates us to get food or water. But there's also dopamine that plays a key role here. Those rat experiments might be extreme cases. But you can see similar effects dopamine has in humans and in our daily lives. In fact, your brain develops priorities in large part based on how much dopamine it's expecting to get. If an activity releases too little dopamine, you won't have much motivation to do it. But if an activity releases a lot of dopamine, you'll be motivated to repeat it, over and over. So which behaviors release dopamine? Any activity where you anticipate there's a potential reward, releases it. But if you know there are no immediate rewards with the behavior, your brain won't release it. For example, before you eat comfort food, your brain releases dopamine, because you anticipate that the food will make you feel good. Even if it actually makes you feel worse. That's because your brain doesn't even care if the high dopamine activity is damaging to you. It just wants more of it. A stereotypical example would be someone who's a drug addict. He knows that what he's doing is not good for him. But all he wants is to get more of that drug. Besides getting you high, cocaine and heroin release unnatural amounts of dopamine, which in turn makes you crave them even more. Of course it has to be noted that nearly everything releases some amount of dopamine. Even drinking water when you're thirsty, does. But the highest dopamine release happens when you get a reward randomly. One such example is playing on a slot machine in a casino. Even if you've only been losing money until that point, you eventually expect to get a bigger reward. You just don't know when it could happen. And in today's digital society, we are flooding our brains with unnaturally high amounts of dopamine on a daily basis, even if we don't know it. Some examples of high dopamine behaviors include: scrolling through social media websites, playing video games, watching internet pornography, etc. We anticipate some sort of reward with each one of those behaviors. That's why we're constantly checking our phones. We expect to see a text message or some other notification. And we know that eventually we're going to receive it. We're becoming like those rats pulling the lever, tying to get a new dopamine hit. And you might think, "Oh so what?" "It's not like it's harming me in any way." But you'd be wrong. Our bodies have a biological system called homeostasis. It means that our body likes to keep internal physical and chemical conditions at a balanced level. Whenever an imbalance occurs, our body adapts to it. Let me give you an example: When it's cold outside, our body temperature falls. And as a result, we start shivering to generate heat and warm the body. However when it's hot outside, our body temperature rises. And we start sweating to lose some of that heat. Essentially our body is looking to maintain a temperature of around 37 degrees Celsius or 98 degrees Fahrenheit, no matter what. But there is another way homeostasis manifests itself. And that is through tolerance. For example, someone who rarely drinks alcohol, will get drunk really fast. But someone who drinks on a regular basis, will have to drink more alcohol, because their body has developed a tolerance to it. Essentially it takes more and more alcohol to make them drunk, because they've become less sensitive to its effects. And it's not much different with dopamine. Your body tries to maintain homeostasis, so it down-regulates your dopamine receptors. Essentially your brain gets used to having high levels of dopamine and those levels become your new normal. Thus you develop a dopamine tolerance. This can be a huge problem, because the things that don't give you as much dopamine, don't interest you any longer. And it's much more difficult to motivate yourself to do them. They feel boring and less fun, because they don't release as much dopamine, compared to the things that do release it in high amounts. That's why people tend to prefer playing video games or browsing the internet, compared to studying or working on their business. Video games make us feel good and comfortable, as they release a lot of dopamine. Sadly things like working hard or reading, releases it in lower amounts. This is one of the reasons why drug addicts who try to quit, have a hard time adjusting to a normal life. Their dopamine tolerance gets so high that normal life isn't able to match it. They become like those rats from previous experiments who have no motivation to do anything if there's not enough dopamine release. And it's not just drug addicts. People who are addicted to video games, social media or internet pornography experience the same thing. Once their dopamine tolerance gets too high, they simply aren't able to enjoy low dopamine behaviors. Which begs the question: Is there anything that can be done to prevent this? The answer is you need to perform a dopamine detox. By now might already have an idea what dopamine detox is going to look like. What you're going to do is set aside a day, where you're going to avoid all the highly stimulating activities. You're going to stop flooding your brain with high amounts of dopamine and you're going to let your dopamine receptors recover. Just a disclaimer: If you're suffering from a drug addiction, then I suggest you seek professional help, as you've probably formed a physiological and psychological dependence. And I don't want you to experience any extreme withdrawal symptoms. Now back to the detox. For 1 whole day you will try to have as little fun as possible. You won't be using the internet, or any technology like your phone or computer. You're not allowed to listen to music, you're not allowed to masturbate or eat any junk food. Basically you're going to remove all sources of external pleasure for the entire day. You're going to embrace boredom. And trust me, there will be a lot of boredom. You are however allowed to do the following: Go for a walk. Meditate and be alone with your thoughts. Reflect on your life and goals. Write down any ideas you get. Not on your computer or phone, but on a physical piece of paper. All of this might seem quite intense. But if you want radical results and you want them fast, you need to be able to take radical action. Now you might be asking yourself: Why would this even work? You can think of it this way. Let's say that you've been eating every single meal at the best restaurant in your town. As a result, what happened is that those fancy meals became your new normal. If someone offered you a bowl of plain rice, you would probably refuse. It simply wouldn't taste as good as your usual restaurant meal. But if you suddenly find yourself stranded on a deserted island and you're starving, suddenly that bowl of plain rice doesn't seem so bad. And that is what the dopamine detox does. It starves you of all the pleasure you usually get, and in turn, it makes those less satisfying activities more desirable. To put it simply: Dopamine detox works because you become so bored, that boring stuff becomes more fun. Now if you don't want to take such extreme action and starve yourself of all the pleasure, you can perform a smaller dopamine detox. You're going to pick one day of the week, where you're going to refrain from one of your high dopamine behaviors completely. Whatever that behavior might be. Maybe checking your phone all the time, playing video games on your computer, binge watching TV, eating junk food, watching internet pornography, whatever. And from now on, every single week for one whole day, you're going to avoid that activity. You can still do other things, but the behavior you pick is off limits. Yes, you will feel slightly bored, but that's the point. You want to let your dopamine receptors recover from the unnaturally high dopamine that's been flooding your brain. And boredom is going to propel you to do other things that day. Things that you would normally put off, because they don't release as much dopamine. And because you're bored, it's easier for you to do them. Of course avoiding high dopamine behavior once in a while is good. But ideally you should avoid those behaviors altogether, or at least as much as possible. Instead you want to connect more dopamine to the things that will actually benefit you. And what I found is that your current high dopamine activities, can serve as an incentive to pursue things, that actually give you those long term benefits. In other words, you could use your high dopamine activity, as a reward for completing difficult work. And this is exactly what I do myself. I track all the difficult, low dopamine work I do. Cleaning my apartment, practicing the piano, reading books, doing some sort of exercise, creating these videos, etc. After I'm able to get a certain amount of work done, I reward myself with some amount of high dopamine activity at the end of the day. The key words here are: after, and, at the end of the day. If I indulge in high dopamine behavior first, then I'm not going to feel like doing the low dopamine work. I'm simply not going to be motivated enough. So I always start with the difficult things, only then I allow myself to indulge in high dopamine activities. To give you an example: For every completed hour of low dopamine work, I reward myself with 15 minutes of high dopamine behavior at the end of the day. That means that for 8 hours of low dopamine, I allow myself roughly 2 hours of high dopamine behavior. Of course, these are my ratios. You can tweak them to your liking. Also it has to be noted that if you're addicted to something that's damaging to your health, then you don't want to treat that behavior as a reward. Instead find a different reward, that's not as damaging. One that you still think is worth the effort. And if you're wondering what my guilty pleasure is, it's the Internet. I can easily get lost there for hours without doing anything else. That's why I have this system. It's so I'm able to control my addiction. But make no mistake, even with this system, I still plan days where I abstain from high dopamine activities completely. To conclude this video I want to say that it is possible to make doing difficult things, feel easier. But when your brain is getting so much dopamine all the time, you won't be as excited about working on something that doesn't release much of it. That's why you might want to limit your phone and computer usage, along with other high dopamine releasing behavior. And I can tell you that it's definitely worth it. So if you have motivation problems, start dopamine detoxing your brain as soon as possible. Separate yourself from the unnaturally high amounts of dopamine, or at least expose yourself to it far less frequently. Only then will normal, every day, low dopamine activities, become exciting again and you'll be able to do them for longer. We are all dopamine addicts to a certain extent. And that's a good thing, because dopamine motivates us to achieve our goals and improve ourselves. But it's up to you to decide where you're going to get your dopamine from. Are you going to get it from things that don't benefit you? Or are you going to get it from working on your long term goals? The choice is yours. If you enjoyed this video, I would really appreciate if you would gently tap the like button. It helps out my channel a lot, as the almighty Youtube algorithm sees that people like these kinds of videos and it shows my content to a bigger crowd. This allows more people to start improving their lives. As always, thanks for watching, and I hope this video made you better than yesterday.

[SUMMARY]

Your brain develops priorities based on how much dopamine it gets. More dopamine for an activity means you are more likely to do it. Dopamine is released when you have an anticipated reward. Highest dopamine release is when you don't expect it. Over time, your brain gets used to having high dopamine and those levels become your new normal. To overcome this, you need to perform a dopamine detox. Dopamine detox makes less satisfying activites more desirable. Boring stuff becomes fun.  

[TEXT]

all right welcome back to cs196 everyone should be an exciting lecture today let's go ahead and get straight into the slides here let me just get my windows all set up okay all right let's get this started so welcome back to cs196 today we are going to start off by talking about what we've done so far in the course because we are officially at the midpoint we are at uh week eight in the semester so this is kind of symbolizing a little bit of a shift in the material that we're going to be covering in this class and also the uh recent lectures have been a little bit more of like a separation between what we'll be doing for the rest of the semester from what we've been doing beforehand uh and yes there is a change in background i'm currently at home for a couple days so a little bit of a different setting here but let's talk about what we've done so far so we've talked about some developer tools so these are you know things like bash git tips and tricks for debugging tips and tricks for googling uh various like very directly computer science related topics such as like how to program in python what are regular expressions how do you consumer restful api things like that and from here on starting on thursday we're going to be covering the rust programming language and the many things that go into that uh but recently we've just kind of threw in some of these professional development lectures so today we're going to be going over how to get an internship uh last lecture we had a feature from imc and of course the center piece of this course is project experience that will this will help you a lot in rounding out your resumes and getting some experience on there very early as a freshman so what is today's lecture going to be about well it's going to be about how do you get an internship you want us you want an internship super badly how do you go about doing it well from you know start to finish we're going to be covering the process here in this lecture and i'm going to try and give all the advice that i could possibly give throughout so first and foremost before you go off and get an internship you have to establish the reasons to why you even want one in the first place and so what are some reasons why you should want to have an internship under your name well first thing is that of course you get some experience out of it this will make getting other jobs and other internships a lot easier because employers do like to see relevant experience on your resumes and relevant experience when you're actually interviewing for a position that's fairly self-explanatory the knowledge of course internships are there so that way you can learn a lot and you know the knowledge that you'll be learning in these internships are not really the kinds of things that you'll be learning in a computer science degree or in the classes in the cs curriculum uh in an internship you'll be learning very directly industry related topics that you won't really see in a computer science degree so you will learn a tremendous amount money uh of course we have to talk about this internships pay very well and why is this important well you know you can use it to pay off some college debt many of you guys are accumulating very large amounts of college debt you can use to pay your rent or your tuition if you want to avoid going into debt and of course you can always invest into the future you know investing financially or you know whatever reason that you might want some money for yourself internships pay very well you can see them starting around 20 an hour all the way to you know even crazy high things such as seventy dollars an hour so internships pay extremely well and finally this is the most important part of an internship this is why you should want to get these internships for yourself return offers you know companies aren't just giving these internships just for fun to give you some money and some experience for nothing what they get out of it is the fact that they want you to work for them full time in the future when you graduate so this is the most important part of getting an internship being able to get a return offer to either continue interning there or once you graduate work there full-time as a full-time employee so before i go into you know giving a bunch of advice and steps on you know how you might want to go about getting an internship i should probably establish a little bit of credibility first like who am i you know i haven't really introduced myself yet why should you guys even you know trust what i'm saying here well uh i'm a computer science and linguistics major here december 2021 um i first started interning in may of 2019 and i stayed at country financials software engineering intern for a full year working part-time during the school years and full-time during the first summer that i was there and uh if you've done the math yes this was a freshman internship and freshman internships are possible and we'll talk about this today uh what was i up to last summer i was a software engineering intern at capital one uh it was remote of course and i i only did i was only there for uh the summer from may 2020 to august 2020 i've been involved with cs196 since january of 2019 i started off as a project manager and uh since last semester i've been as the instructor including this semester with rohan and i'm currently working with caterpillar part-time while i'm taking classes and i'll probably continue working part-time for them until like the end of the school year or so and for this summer we'll see uh still working on getting something stay tuned on my linkedin or something i don't know who knows where i'll end up so who was i coming into the university of illinois i think this is important to talk about because you know i think that uh we have a lot of questions in the chat here but they're being answered okay so who was i coming into the university of illinois i mean was i like a programming god was i programming since the day i came out of the womb uh not at all i was a very small brained high schooler um i loved public speaking that's really what i spent all of my time doing in high school basically i you know did not do anything coding related i i was onto the speech team in high school um i had basically zero coding experience and when i first put together this uh lecture last semester i went into the college board and i pulled out this right here this little screenshot from the college board i don't really tell many people this i got a one on the ap computer science exam and uh cut me some slack my teacher was like exceptionally terrible i'm not gonna be nice about it she was really bad so spare me i'm pretty sure everyone in the class got a one uh and that's one of the reasons to why i'm very cautious of bad teaching myself but that's about it i mean i was absolutely terrified coming to the school for this fact here i wasn't really a coding god or something and you know coming into a pretty good computer science program it's very scary to you know go in with that kind of experience so i know how many people feel right now um and i'm not really saying this to humblebrag or something i just want to take this as an opportunity to kind of before we even talk about going into how to get an internship or something let's kind of dispel these elitist notions right before we even start uh let's dispel all little these notions about who gets internships and who doesn't you're all capable all it really takes is time it takes some luck and it takes hard work this is all it is you don't have to be coding since the day you were born you don't have to be an absolute genius or something um let's just get this out the way now so nice to get to know me a little bit more how do you actually get an internship uh well let's talk about this a little bit more step zero do not compare yourself to other people this is keeping the previous fact in mind and so sorry we have some questions in the chat but it seems like a lot of people are asking questions that we will be answering later on in the lecture so stay tuned but yeah step zero do not compare yourself to other people why should you not compare yourself to other people well this is cs at illinois and this isn't to be like you know gatekeeping about where we are you know we're in a great school with a lot of very smart smart people with a huge variety of experiences etc there will be a point in your college career where you know someone that's at facebook apple amazon whatever it is put your hand in the bucket of fortune 100 companies and i promise you you will be able to find a student here that is working for them it is super discouraging to do this everyone is capable it is extremely unhealthy to do this and let's look at two different sides of the coin here let's say you feel behind others let's say you know right now you're kind of coming in you're not really super experienced or you don't really think you're all that smart and you feel you're really behind in this program when you put people on pedestals what happens here you be unnecessarily hard on yourself and you're limiting what your own capabilities are but let's look at the other side of the the spectrum here what happens if you feel like you're ahead of others you know you're coming into college you've been programming for a while now you feel like you've you've got some good experience here and you know you feel really comfortable if you feel like you're ahead of others comparing yourself to other people makes you feel the opposite it makes you feel like there's no real need to work hard there's no need to grow there's no need to learn this is not good either so instead of trying to compare yourself to other people contribute to the culture of collaboration that we have at the school not competition learn from each other support each other and put yourself on your own skill i just wanted to get this out of the way now because i think it's really important and i feel like i have some sort of responsibility as like one of the instructors for this course talking to a lot of freshmen to make sure that like the future of siesta at illinois make sure it doesn't turn into some elitist like super annoying group of people don't be this way collaborate with each other support each other because of this next thing that i'm going to talk about now you're an average of the people that you're around surround yourself with people that push you and encourage you not the other way around so if there are people that are just like doing the complete opposite here just get them out of your life there's no reason to you want to put yourself in a position to succeed and you want to be around people that want to see you make that happen so thanks for the confidence but where's my internship i don't see it anywhere let's actually get into the real thing here so let's outline what the typical interview process looks like first things first is you got the interview so what is what does the first step usually look like well it usually looks like a coding challenge uh then after that you'll have a behavioral interview then later on a technical interview and then a final round either on-site or remote and then finally you get the offer and we're going to basically this lecture every single step of the way talk about how you can get to the next step and various ways to succeed in every step along the way not you know not every interview process is like this but it follows a very similar structure usually so in order to get an internship you have to do step number one which is you have to actually get the interview how can you get an interview well there's various ways to get into the process here you can apply online so that means just taking your resume and just applying like crazy take your resume and spam it to every company you see you can get an interview through referrals if you have friends connections family members whatever it is these are people that can help you get into the company career fair we host multiple career fairs at the school we have one in the fall one in the spring and then also we have after hour events which are basically more casual career fairs and now because of coronavirus they're virtual and finally cold emailing recruiters so we'll talk about every single one of these so first we talked about applying online so what does applying online look like to get the interview well you can do this in a couple different ways but i would recommend just spamming like crazy all companies basically ask for the same exact information it's just like give us your resume are you a veteran do you have a disability and what is your race and ethnicity um and do you need like are you a citizen of the country that's basically every single cut every single job application you'll see with some minor differences here and there so take your resume and spam it like crazy you don't really need to worry too much about being qualified or not just mindlessly spam your resume a lot of people ask me about cover letters when i talk about this my opinion this is purely my opinion is i have no idea what you're supposed to do with these cover letters i personally i'm going to say i've personally stopped bothering with them i don't think they even read them so one perspective is that it differentiates you from other applicants because you stand out you bring your resume to life with a cover letter my perspective is they probably don't read it you're saving a lot of time and if you are trying to optimize and write a cover letter by like you know switching out the company name then it's obviously not tailored and i think they can clearly see that so this is just my opinion you don't need to you know take it for what just take it for what it is basically ask ask various people for their opinions on cover letters but that's that's mine so that's step number that's option number one to getting the interview the applying online another option is referrals referrals are easily the most powerful way of getting an interview at a company so it basically guarantees you the interview a person in the company can vouch for you they can say you know this person i've worked with him on you know ex-team or i've known him for a long time him or her and you know she does great work so you should definitely give her a try um ask your friends and connections for this uh create a linkedin so that way you can actually allow other people to reach out to you and you can reach out to other people that might have been alumni of the school or you know whatever it is you can you can get in contact with people this way and i've actually had uh recruiters reach out to me on linkedin so like this is something that actually happens uh linkedin must have it and let's have a little bit of a referral of how our demo of how powerful these referrals are so freshman year i had a a professor in linguistics in uh in the spring semester and i had a course with him and at the end of the semester i just basically said like hey i'm really interested in computational linguistics i'd like to just talk to you about you know various things in the field not sure if i really like it or not you know i would just be interested in talking to you about these things and so out of nowhere he just sort of said like sounds great uh how about i take you out for lunch uh it's my treat and p.s do you want a job and so this completely took me by surprise by this point i actually already accepted an offer that was the offer from country financial but this just goes to show how powerful these referrals are usually referrals don't lead to offers straight away but i will say that they will at least guarantee you an interview so that's just going to show a little bit of how powerful these referrals can be third way to actually getting an interview career fair career fair does work uh i know people personally who have received interviews and offers from the career fair i haven't had a whole bunch of success with the career fair but i can guarantee you it does work and it is worth your time tips and tricks for the career fair check the companies that are attending on handshake and make a plan of who you'll see i will note that career fairs are a little bit different nowadays because of coronavirus like everything is virtual so the way that career fairs happen is slightly different but the tips are kind of the same like make sure you're actually making a plan of what companies you want to talk to beforehand um make sure you go early even virtually this is still very important even this semester in the virtual career fair very early in the morning like the rooms were very quiet and this is because most people don't go early so if you go early you're able to to beat the crowds and you're actually able to actually have some talking time with recruiters um they get very very crowded especially in person the arc is where they hold the career fair usually and it just gets extremely extremely obnoxious try to beat the crowds by going early and most importantly have a quick pitch for yourself prepare they call it your elevator pitch and what is an elevator pitch well it's just a fancy way of like saying for 30 or 40 seconds who are you what have you done why are you actually interested in working for this company and this is really important because like a lot of people at a career fair uh they just sort of like walk up to recruiters and they just sort of stare at them uh don't do this like have something to say especially because a lot of these recruiters expect you to begin the conversation if they expect you to begin the conversation just start off with a pitch like hi i'm samuel cotty computer science linguistics major i'm graduating in this year i've worked at x y and z and or here are some projects that i've done where i've worked on x y and z i'm interested in your company because of you know k z y whatever other variables there are and this is why i want to work for you so like just have a very quick pitch for yourself don't just walk up to recruiter and stare at them awkwardly um so that that's the career fair and the final suggestion that i have for getting the interview is step four which i think a lot of people don't really uh but i think a lot of people don't actually even try it's cold emailing recruiters this is somewhat of a last resort tactic but it does actually have a some some success rate i mean i'm not going to say the success rate is super high it's actually fairly low but i think it is worth a shot especially if you're getting desperate uh you basically just send emails emails to recruiters talking about your experience and there are some templates that you can follow online uh you know to help you get started on how you should maybe structure one of these cold emails so don't expect a response from these like if you're lucky you will get a response but if you send like 15 cold emails to recruiters don't expect 15 responses back expect zero maybe one or two if you're lucky but it's worth a shot and actually so here's another little bit of a demo of cold emailing recruiters this is actually the email that got me the interview to my first internship freshman year i just basically uh emailed a recruiter i said like hey i'm samuel cotty i'm a computer science linguistics major uh this is the project that i did in 196 actually uh working on this project it gave me experience with these various things and i'd love to work for your company and if an opening is still available i'd love to chat uh i got a response from this uh this was one of like 20 cold emails i sent i got the interview and i ended up working for this company freshman year all the way until may 2020. so cold emailing recruiters does work and it is worth a shot especially as a freshman if you're getting pretty desperate like you are desperate i was very desperate so i think all of those are worth a shot if you are really really trying to get get an uh get an interview go to every career fair you can find cold email recruiters spam your resume like crazy to even positions that don't say they hire freshmen just do it anyway why not and try to find as many referrals as you can this is your best shot at doing uh at getting an interview so now we have officially gotten past this little part right here we are now officially in the first stage of the interview the first stage of the interview is almost always a coding challenge what is a coding challenge well it's basically these companies it's their way of kind of weeding out people before they spend resources interviewing you because you know interviewing people does take time it does take money uh they have to hire interviewers if it's in person like non-coveted they have to fly you out sometimes they have to give you a hotel room like or even the people that they're paying to interview you whatever it is it does cost them some amount of money to interview you so these coding challenges are a great way of just weeding out as many people as possible before they actually spend these resources on you there are usually one to three coding problems usually unproctored and they're on platforms like websites like hackerrank which is a very similar environment to what you see on prairieland it's just a contained environment with a problem and a text editor so if you pass the coding challenge you know you do well on these questions then that's that's basically it for the coding challenge now you're actually into usually the behavioral interview stage and that leads me to step two uh don't fail the behavioral interview i am a firm believer that you should never ever fail a behavioral interview uh what is a behavioral interview it is their way of evaluating you based on your past experiences to understand the way that you would react to various job-related situations so this is purely behavioral stuff it's not technical they won't really ask you anything about computer science this is about you as a person how do you handle certain situations and what can they expect from you in uh in various situations right so don't fail the behavioral interview why do i say this why is this like my opinion on this well the questions don't ever change like they are literally always going to be the same exact questions tell me about a time when you xyz uh why do you want to work for us you can find a bunch of practice questions on google and you'll find that they are all really really similar so how do you prepare for these behavioral interviews well i think that you should prepare some general responses to very common questions like you should have a response prepared for the tell me about yourself question because it's asked literally every single time you have an interview tell me about yourself like it's very open-ended if you don't know how to answer it look online but you should prepare some responses for these like if you don't know how to answer a question like this your interviewer is going to be a bit confused because it's so common um and then for your projects try to prepare some examples for like around three different projects that you have and if you don't have three projects that you've done before you know one or two whatever it is but if you have more than three or equal to three three projects and prepare some examples of some challenges that you faced while working on the project some mistakes that you've made what did you enjoy about the project what are some examples when you took leadership in this project uh team conflict how did it resolve how did you handle this team conflict um what would you do differently if you could do this project all over again and make sure you actually understand your project project very well be able to discuss the various technical tradeoffs whatever it is because behavioral interviews are almost always literally just questions about your projects if they say tell me about a time when you did x y and z you can pull from your little mental flow chart that you've made here and say well you know a time that i had when i took leadership is you know when i worked on a project in cs196 and yada yada right so prepare these general questions for these very common scenarios for a couple of your projects so that way you can pull from them when you have these behavioral interviews so what are my tips and tricks for the behavioral interview first things first speak with confidence i mean like if you're just sitting there and mumbling and stumbling through your interview they don't want to listen to you like nobody wants to listen to anyone that talks like that try your best even if you're super nervous to just be there with them speak with confidence uh what is speaking with confidence let you do well it helps you get away with mino minor stumbles like if you you know are saying something that you don't fully remember but you're just like yep this happened you know you can kind of get through these minor little stumbles that you might have um if it sounds like you don't really know what you're talking about then they will probably think that you don't know what you're talking about you know talk about what you did don't talk about what your team did this is really important if they're asking you about like a certain scenario where you did something uh you know tell me about a time when you did this and you respond with well my team did this and my team did that they're not hiring the team they are hiring you what did you do right so be very careful not to make this mistake if you're forced at any point like you absolutely have to talk about the team that's fine but the focus is on you don't be arrogant this is a huge red flag interviewers are looking for arrogance they don't like arrogant people because nobody likes arrogant people don't be arrogant when you're talking you know in the behavioral interview but also don't be too humble feel free to brag i mean this is the time to brag in your interview but impress them by talking about the impressive work that you did because this is the time to brag but don't go on about like arrogant things like you know i did all the hard parts of my project or something like that stay away from this if they find that you're arrogant like you could totally nail the technical interview you could nail you know whatever else it is but they don't want to hire you if they don't want to work for you they want to hire people that they want to work with that they enjoy being around so avoid setting off these red flags in the interview um and of course use what is called the star structure for your responses this is the easiest way to go about responding to behavioral interviews and will help you a tremendous amount in making sure that you actually answer the question that the person is asking you and so what is the star structure it is situation task action and results so they say tell me about a time when you uh when you made an impact on a project and you know you say well uh in my freshman year in cs196 i had a team project where i worked on you know yada yada yada and i was tasked with uh you know implementing the front end of this application in react and i was able to do x y and z and as a result i was able to you know do whatever like this is kind of a general structure that you can follow in making sure that you're actually answering the questions that they give you the star structure is very common so if you want to see examples of how to follow the star structure you could just google it and you will find a large amount of answers on this okay so also final thing ask questions at the end of an interview or even throughout they will want you to ask questions they will leave time for questions and you have to ask questions like if at the end of an interview they say you know any questions for me and you say nope thank you very much it is very likely that you didn't do well in that behavioral interview because that is like a big problem if you don't have any questions for them uh talk to your interviewer like they're a human don't be too stiff so like what that means is make sure for one you actually research the company beforehand i've heard way too many stories of people who go into these behavioral interviews and you know someone like the interviewer asks them like well why do you want to work for this company or you know what is your favorite what like what really stuck out to you about this company and they're just sort of staring at them like i've had people that i know interview for companies that they didn't even know what they did like they just found them on a job board got an interview and did it and they were totally speechless in the behavioral interview don't do this research the company um so what that allows you to do let me get my camera out of the way what that allows you to do is actually ask some questions like day-to-day life at the company questions that stem off of your research questions about like what they have within the disciplines that you're interested in so if you're particularly particularly interested in machine learning and you want to know the kind of opportunities that this company has for machine learning this is a great question to ask in uh the interview if you're curious about like how certain you know inter company relations are how does technology work with the business side of things in this company things like this asks ask some questions about what you're genuinely interested in so that way it shows the interviewer that you actually did take the time to look into the company and what they do and you know that you're actually interested in what they have to say and finally show that you're coachable this is an internship you are there to learn so don't you know this goes back to the arrogance thing like show that you are just a college student that is you know somewhat just curious to learn and to broaden their understanding of about software engineering computer science whatever it is okay so now that we have passed the coding challenge and the behavioral interview we are now in the infamous technical interview stage so that leads me to step three which is crush the coding interview what is the coding interview well here you're usually interviewed by a technical member of the company so this is like a senior software engineer or maybe just like a software engineer that's been there for a couple years and here is where you will be given a problem sometimes more than one and you need to do your best to solve it efficiently and correctly while explaining your thoughts and decisions throughout so out loud like what are what's your thought process how are you working through this question and so what kind of problems are we talking about um i highly recommend you use leetcode.com this is an excellent database of problems that have been asked before in real life technical interviews there's over a thousand questions on there and companies even the large companies like pull questions directly from this website so i highly recommend you do it for practice and you do it to prepare for certain companies like this is where they get the questions and this is the best source of practice that you can find so let's look at some examples well these questions can range from really easy to really hard here's an example of an easy question uh reverse a string you're given a string return the reverse of it and you know this is something that many people could probably solve like freshman year with only taking cs125 um but they can get a little bit harder so like here is an example of a medium level problem uh the cheapest flights within k-stops you have a graph data structure which is something that you won't learn until 225 or 173. and uh you have to find you know with a with a with a graph representing uh cities what is the cheapest way to get from a to b with k stops uh and here's a little bit of a harder problem given a 2d binary matrix filled with zeros and ones find the largest rectangle containing only ones and return its area um this looks really stupid to some of you like this looks really dumb it doesn't look like anything you'll ever have to do in a job and you're it'll make you wonder why they're interviewing you like that um you won't i won't be the first person to tell you this but technical interviewing is a skill that is mostly independent from software engineering and you can get better at it through a lot of practice and repetition um it's not really like you're gonna go into a job and they're gonna have you check if a string is a palindrome it's more like this is how they interview you and when you get on the job you're going to be working on like writing an api or something they're fairly separate and it's kind of just like the reality that we have to face until they find a better way of interviewing us so how do you get good at these technical interviews well first things first i would say get comfortable with the language that you will use during these interviews and you can use whatever programming language that you want so if you really really like c plus plus you can use c plus plus in your interview uh i personally prefer higher level languages like python i think that they're great for interviewing because they abstract away a lot of like things that might be kind of annoying in other languages like i had an interview once where you know the the overall focus of the interview wasn't this but one part of the question was being able to check if one date string came before another date string like if one date was before another date on the calendar uh that's not like necessarily a trivial thing to write if you wanted to write that from scratch but in a high level language like python i was able to literally just say string1 and string2 and just put the less than symbol in the middle and that did what i wanted it was great if i had to write this in like c or c plus it would be a little bit more non-trivial to do that but again just use whatever you're most comfortable with if you're most comfortable with java use java don't don't try to use python if you don't know python [Music] practice practice practice practice you will eventually develop better pattern recognition and uh there are some classes that you can take that will help you with some of the foundational knowledge in these uh in these coding interview problems uh this is cs225 which is data structures cs374 which is algorithms and cs241 which is systems and these classes will generally help you with the foundational knowledge that you'll see and don't get me wrong you can still practice and get internships without these classes like they are by no means a requirement but they will help you with the foundational knowledge and finally don't give up uh it takes some time to wrap your head around these technical interview problems uh eventually problems that stumped you will become a breeze like there are problems that i look at from freshman year that totally just stumped me and i had no i looked at the solution to the problems and i was like how would anyone be able to look at this problem and get the solution to it in like a 20 to 40 minute technical interview it's crazy to me and then i look back at that problem sophomore year and it is just a total breeze but there were problems sophomore year that stumped me and i look back at them now and i'm like this is a like i can implement this in two minutes so don't give up give it time you'll be able to wrap your head around it with a lot of practice and you know i promise don't don't think that this will be the death of you or the end of you so here's a general approach to tackling these technical interview problems first things first understand what the question is saying this is like obvious right you have to understand what the question is saying but sometimes this can really take a second some of them can be a bit convoluted some of them can be a bit complicated right out of the gate just give it a second really understand what the question is saying and if you have an interviewer feel free to ask the interviewer questions they are there to help you uh try some examples so this will help you understand the problem more identify edge cases and it'll maybe even help you trigger your pattern recognition if you you know give the problem some examples or look at some of the examples in like the problem write-up uh you'll be able to see like oh you know i've kind of done a problem like this before or you know you'll be able to say oh later down the line i'll probably want to handle this edge case that seems like something that will give me some issues and uh before you really like especially when you're not like a super experienced technical interviewer try not to think about the best solution first try to think about just what will get the job done what is a brute force solution and this is usually the really inefficient bad solution and in some interviews this is fine like in some problems in some companies and some interviews the brute force solution is enough but um from there once you actually have that you can from there then look for improvements and try to develop a better algorithm to solve the problem once you have this code up your idea test your idea to make sure that it actually works and um analyze your idea you will learn how to analyze like the efficiency and the runtime of algorithms once you learn a big o notation 125 covers it but this is something that you'll want to do at the very end like my algorithm runs in this time it uses this much memory and this is likely the best solution or maybe we can improve on certain things etc more tips for the technical interview do not stay quiet think out loud they want to hear your thoughts they want to hear what you're thinking and they want to hear how you're how you're you know solving through this problem uh don't like so interviewers are there to help you um ask them some clarifying questions if you are stuck on something they're there to help you they also can sometimes give you hints uh sometimes you'll have a mean interview interviewer like i'm not gonna say that they're all super nice and and collaborative you will have some mean interviewers but most of the time they're there to help you um you can ask them clarifying questions they can maybe give you some hints to kind of kick you in the right direction or sometimes move you away from the wrong direction etc listen to what they're saying because sometimes they might be hinting at something and the reason why this is is because you can kind of think about it as like a simulation of what it would be like when you're working on the job they want to see again like we talked about earlier they want to see that you're coachable they want to see that you're capable of collaboration they don't want to see heads down coding because at a real job you're not just heads down coding it's not like you're in a cubicle with your you know head and shoulders really you know tight on your computer that's not happening um it's very open very collaborative people are talking to each other there's pair programming sometimes you know there's a lot of collaboration that goes on in a software engineering job or any sort of coding job and so in an interviewer in an interview they want to see that you're capable of doing these things they want to see that you're capable of thinking out loud that you're able to collaborate with the interviewer on certain ideas and certain approaches etc so no heads down coding try to stay away from this and sometimes you don't need to be perfect on the problem depending on the problem some of them are really hard and you don't need to get the most efficient fastest solution right away in a 30 minute interview sometimes brute force solution is totally fine and sometimes no solution is okay like it really depends on the problem the interviewer and the company uh and what that means is just do your absolute best even if it seems like you're not close to the solution or you have no idea what you're doing try your best don't give up see what happens like halfway through the interview don't just say oh i don't know how to do this problem uh sorry keep going give your best shot keep on thinking out loud maybe you'll find something maybe you won't maybe you'll find something that isn't the best that's fine just do your best see what happens you never know um so step four putting it all together this is the final stretch you made it through the coding challenge you made it through the behavioral you made it through the technical what does the final round look like this is usually a combination of more behavioral interviews and more technical interviews and so some companies will fly you out they'll put you in an awesome hotel room they'll treat you like royalty of course everything is virtual at the moment so that's not going to be happening but um some companies will just do it over skype like even in normal times so like you know a year or two from now whenever a vaccine if it's fully distributed like this is what you can expect from an in-person interview and some companies will just do it over skype zoom or whatever you know other video conferencing service and also another thing is that some of these technical interviews might be over whiteboard you won't always have a compiler at your disposal sometimes you literally have to write out code on a whiteboard or on a you know pen and paper so or sometimes you'll write code into a you know a uh like google i'm pretty sure literally has you write code in a google doc some companies have you write code into a text editor but they don't have any test cases that you can run and the reason why they do this is because they want to see that you're not like super dependent on a compiler or that you're not just like spamming test cases to see if you get things right uh this is nice for them to be able to see like you're capable of thinking about edge cases you're capable of actually verifying if code works yourself um and that you're not like you know you won't have any syntax color highlighting or syntax suggestions things like that so this is their way of kind of testing you on those things so now we have officially made it through the process so that is so we are we are here now we are we have made it through the long and grueling process and you have an offer congratulations what does that mean um if you accept you're locked in and what does that mean well if you sign off on the offer that means you're working there for that summer or for that time period and they don't expect you to accept an offer from another company unless you do what's called reneging uh reneging is when you accept an offer from one company and then you continue interviewing and you accept an offer from another company and you tell the original company hey sorry that offer that i accepted it ain't gonna happen i'm actually working somewhere else uh this is called reneging don't do it uh it's bad and there's various reasons why it's bad um you'll hear some stories of people who reneged a company and they like got blacklisted from a bunch of other companies because companies do talk to each other there are some stories of people who reneged and nothing happened to them personally i just don't really think it's worth it and i don't really think it's something that's worth the risk because there are some stories that are horrifying and there are some stories that are totally uh benign just kind of proceed if you know proceed at your own caution if you want to renege but my suggestion is don't do it now if you're in the process for other places and you have this offer that you haven't accepted yet usually you can leverage this offer to either get more time to decide from your current company or tell other companies hey i have an offer that's going to expire in two weeks i'm going to need you to speed up my interview process please i need that this is better than reneging try to avoid reneging and try to never do it instead use this offer as leverage and of course stay humble uh you know i shouldn't really have to say this but like if you got an offer don't just like go around and you know be super annoying about it just like be humble be happy for yourself people would be happy for you don't worry you're not better than people forgetting it just more like you know congratulations right so what about rejection i got rejected sammy what do i do you didn't talk about rejection all lecture well rejection is normal it's totally normal it's a part of the process and it is 100 something that you will experience a lot um i would estimate that since freshman year i've been rejected from internships about 300 over 300 times or so and i think i've only i'm pretty sure if i'm calculating it right i've only had like five offers to show for them uh this is the side of things that many people don't really talk about like if you go on linkedin or something you'll just see like offer from facebook offer from google i'm interning here i'm interning there but nobody really talks about the process that it took for them to get to that point and oftentimes the process that it took for them to get to that point is a whole hell of a lot of rejection um so keep on trying the opportunity will come i promise this is the like blessing that we have as people that are working in this field there are a lot there is a lot of opportunity if you are a software engineer data scientist like many of the things that stem down from computer science uh we like if you walk into the career fair you have so many opportunities and so many companies that are hiring people in tech so what that means is take advantage of this apply to hundreds of companies because you can why not uh we are so privileged in this field to be able to do this so take advantage of it take your resume apply to a bunch of places there is zero harm in doing this and it's a numbers game you know eventually you will have some offers to show for them but don't get caught up over a rejection it's gonna happen over and over again don't let it discourage you it happens so here's a little bit of a bonus uh if it wasn't a no reply email like if you got rejected from a company and it was a recruiter that that told you about the rejection or you know if it was if it was anything but a no reply email um you are now in touch with a recruiter so be respectful tell them like thanks for the opportunity even though it didn't work out this year stay in touch for another shot next year this is a great connection to have don't just like burn the bridge because you failed their interview or something stay in touch tell them that you know this is something that you're still interested in for the next year or the next semester or whatever it is it's a great connection to have so what are the types of rejection as a freshman you will likely have a lot of resume rejections and that is totally normal um the this is likely what you will experience the most of uh you will also have rejections after interviews so you know you interviewed you didn't do too great and you got rejected another option is just flat out ghosting you just never hear back from the company and if you get ghosted most of the time it means rejection but you can still kind of follow up with a recruiter say like hey i interviewed at this point or hey i applied like a month ago um i'm still really interested stuff like that and of course this is something that a lot of people actually don't realize is that these spots are limited there are not infinite infinite amounts of positions at internships so spots fill up interview season starts around like august maybe even earlier than that and some companies only have like 50 spots that they're trying to fill so the longer that you wait to apply the longer that you wait to interview the harder it's going to get because spots do fill up and i know some people that passed interviews and they're in the process for a company but they had no spots remaining and they just got rejected off of that so be wary of this they don't have infinite seats or infinite paychecks that they can give to people these are some things that you should know about very very important there are freshmen and sophomore programs so these are programs that big companies have specifically for freshmen and sophomores apply to them because there is no harm to it and they are built for people like you limited experience and freshman sophomores this is google step facebook university microsoft explorer throw an application at them why not research park if it's anything you take from this lecture it is this research park at the university of illinois we have research park which is basically uh like right off campus slightly on campus we have research park hundreds of companies uh the likes of yahoo uh caterpillar capital one uh amaran cme group country financial state farm is there there's so many of these large companies and the only other people that are applying to these companies are uiuc students they are very accepting of freshman sophomore and of course juniors and they usually don't ask technical questions so this is an awesome opportunity a lot of the people that i know their first or second internships were just at research park and the companies are still really good um they are fortune 100 companies they are top companies and they are awesome opportunities to work for you can work for them during the summer you can work for them part time during the school year this is an awesome opportunity go on to their job board you know make sure you keep an eye on it and apply periodically and try to get a position there for sure and of course there are more than just summer internships if you have a semester to blow you can take some time off to do one in the spring or the fall concurrently with school if you're remote or at research park so some people take semesters off and do co-ops or internships full-time some people like me i do part-time as an intern so this is a great opportunity to have miscellaneous resume tips make sure you put your gpa on it and usually the threshold is like three and above just put it on your resume but if you don't want to just leave it off like barely any companies ask for uh gpa uh this is also really important put your graduation end date instead of the start date uh if you have like if you have like 50 credit hours coming in as a freshman or whatever it is and your like sophomore junior status don't say that because they don't care but what they do care about is if you are planning on graduating early because being a junior by credit hours means nothing unless you are actually planning on graduating early because like i said at the start of the lecture their main goal is to hire you full time so that is why it's so difficult as a freshman to get an internship you are so far out from graduation and that's why it's easiest for a junior but if you are closer to graduation make sure you mention that make sure you do say that you are graduating a semester or a year early because it will benefit you uh if you have no experience get experience you don't have to have a job to have experience get some projects on your resume do some hackathons take this class put your 196 resume on your uh on your your 196 project on your resume do research email some professors if you're interested in research i've never done it personally but i know a lot of people uh i know rohan has done some research himself like just get experience if you don't have experience you don't need to have internship experience to be able to talk about things in your behavioral interviews and on your resume uh that is it for my lecture today that was all the slides that i have we finished right on time uh feel free to ask a bunch of questions in the discord chat essentially everyone on our staff has had an internship before there are some people that just have extensive project experience but many people on our staff have interned at somewhere before so like feel free to ask us questions we've been there before we've done it ourselves and uh i can answer some questions right now

[SUMMARY]

Everyone wants an internship. Getting an internship makes getting jobs easier, knowledge about industry related standards, and money to pay off college debt. Do not compare yourself to other people for getting an internship. Interview process includes a coding challenge, behavioral interview, techinical interview, and then a final round. To get the interview, applying online. Referrals are very powerful to get in. Go to a career fair and prepare an elevator pitch. The coding challenge is simple programming problems. Behavioral interview is about you are a person. The technical interview involves solving problems that having nothing to do with the job. This only comes with practice. Getting an intership is hard. Don't give up!